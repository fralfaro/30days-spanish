{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidos a 30 d\u00edas de Streamlit!","text":""},{"location":"#contenidos-del-curso","title":"Contenidos del Curso","text":"<p>Principiante (D\u00edas 1-7)</p><p>Configura tus ambientes de desarrollo local y cloud, instala Streamlit, y construye tu primera Streamlit app.</p> <p>Intermedio (D\u00edas 8-23)</p><p>Aprende un nuevo comando de Streamlit cada d\u00eda y \u00fasalo para crear y desplegar una Streamlit app.</p> <p>Avanzado (D\u00edas 24-30)</p><p>Aprende temas avanzados como estado de sesi\u00f3n, manejo eficiente de datos y memoria con cach\u00e9, dise\u00f1os complejos y mucho m\u00e1s.</p>"},{"location":"__init__/","title":"init","text":""},{"location":"content/Day1/","title":"Configurando tu entorno de desarrollo local","text":"<p>Antes de empezar a desarrollar nuestras aplicaciones, vamos a necesitar primero configurar el entorno de desarrollo.</p> <p>Comencemos instalando y configurando el entorno Conda. </p>"},{"location":"content/Day1/#instalar-conda","title":"Instalar conda","text":"<ul> <li>Para instalar <code>conda</code> dir\u00edjase a https://docs.conda.io/en/latest/miniconda.html y seleccione su sistema operativo (Windows, Mac o Linux). </li> <li>Descargue y ejecute el instalador para instalar <code>conda</code>.</li> </ul>"},{"location":"content/Day1/#crear-un-nuevo-entorno-conda","title":"Crear un nuevo entorno conda","text":"<p>Una vez que haz instalado conda, comencemos creando un entorno para gestionar todas las dependencias de la librer\u00eda Python.</p> <p>Para crear un nuevo entorno con Python 3.9, ejecute lo siguiente: <pre><code>conda create -n stenv python=3.9\n</code></pre></p> <p>donde <code>create -n stenv</code> va a crear un entorno conda llamado <code>stenv</code> y <code>python=3.9</code> va a especificar que se utilice la version 3.9 de Python en el entorno conda.</p>"},{"location":"content/Day1/#activar-el-entorno-conda","title":"Activar el entorno conda","text":"<p>Para utilizar el entorno conda llamado <code>stenv</code> que acabamos de crear, ejecute lo siguiente en su terminal:</p> <pre><code>conda activate stenv\n</code></pre>"},{"location":"content/Day1/#instalar-la-libreria-streamlit","title":"Instalar la librer\u00eda Streamlit","text":"<p>Es tiempo de instalar la librer\u00eda <code>streamlit</code>: <pre><code>pip install streamlit\n</code></pre></p>"},{"location":"content/Day1/#ejecutar-la-aplicacion-demo-de-streamlit","title":"Ejecutar la aplicaci\u00f3n demo de Streamlit","text":"<p>Para ejecutar la aplicaci\u00f3n demo (Figura 1) ingrese: <pre><code>streamlit hello\n</code></pre></p>"},{"location":"content/Day10/","title":"st.selectbox","text":"<p><code>st.selectbox</code> permite la visualizaci\u00f3n de un componente de selecci\u00f3n.</p>"},{"location":"content/Day10/#que-estamos-construyendo","title":"Que estamos construyendo?","text":"<p>Una sencilla aplicaci\u00f3n que pregunta al usuario cu\u00e1l es su color favorito.</p> <p>Comportamiento de la aplicaci\u00f3n: 1. El usuario selecciona un color 2. La aplicaci\u00f3n imprime el color seleccionado</p>"},{"location":"content/Day10/#demo-app","title":"Demo app","text":"<p>La aplicaci\u00f3n Streamlit implementada deber\u00eda parecerse a la que se muestra en el siguiente enlace:</p> <p></p>"},{"location":"content/Day10/#codigo","title":"Codigo","text":"<p>Aqu\u00ed est\u00e1 el c\u00f3digo para implementar la aplicaci\u00f3n mencionada anteriormente: <pre><code>import streamlit as st\n\nst.header('st.selectbox')\n\noption = st.selectbox(\n     'What is your favorite color?',\n     ('Blue', 'Red', 'Green'))\n\nst.write('Your favorite color is ', option)\n</code></pre></p>"},{"location":"content/Day10/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un texto de encabezado para la aplicaci\u00f3n: <pre><code>st.header('st.selectbox')\n</code></pre></p> <p>A continuaci\u00f3n, crearemos una variable llamada <code>option</code> que aceptar\u00e1 la entrada del usuario a trav\u00e9s del comando \"st.selectbox()\".</p> <p><pre><code>option = st.selectbox(\n     'What is your favorite color?',\n     ('Blue', 'Red', 'Green'))\n</code></pre> Como podemos ver en el cuadro de c\u00f3digo anterior, el comando <code>st.selectbox()</code> acepta 2 argumentos: 1. El texto que va encima del componente de selecci\u00f3n, es decir, <code>'What is your favorite color?'</code> 2. Los valores posibles para seleccionar <code>('Blue', 'Red', 'Green')</code></p> <p>Finalmente, imprimiremos el color seleccionado de la siguiente manera: <pre><code>st.write('Your favorite color is ', option)\n</code></pre></p>"},{"location":"content/Day10/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>Ahora que ha creado la aplicaci\u00f3n Streamlit localmente, es hora de implementarla en Streamlit Community Cloud.</p>"},{"location":"content/Day10/#referencias","title":"Referencias","text":"<p>M\u00e1s informaci\u00f3n sobre <code>st.selectbox</code></p>"},{"location":"content/Day11/","title":"st.multiselect","text":"<p><code>st.multiselect</code> muestra un componente de selecci\u00f3n m\u00faltiple.</p>"},{"location":"content/Day11/#demo-app","title":"Demo app","text":""},{"location":"content/Day11/#codigo","title":"C\u00f3digo","text":"<p>Aqu\u00ed se explica c\u00f3mo usar <code>st.multiselect</code>: <pre><code>import streamlit as st\n\nst.header('st.multiselect')\n\noptions = st.multiselect(\n     'What are your favorite colors',\n     ['Green', 'Yellow', 'Red', 'Blue'],\n     ['Yellow', 'Red'])\n\nst.write('You selected:', options)\n</code></pre></p>"},{"location":"content/Day11/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un encabezado para la aplicaci\u00f3n: <pre><code>st.header('st.multiselect')\n</code></pre></p> <p>A continuaci\u00f3n, vamos a utilizar el componente <code>st.multiselect</code> donde los usuarios podr\u00e1n seleccionar uno o m\u00e1s colores de su elecci\u00f3n.</p> <pre><code>options = st.multiselect(\n     'What are your favorite colors',\n     ['Green', 'Yellow', 'Red', 'Blue'],\n     ['Yellow', 'Red'])\n</code></pre> <p>Finalmente, escribiremos los colores seleccionados: <pre><code>st.write('You selected:', options)\n</code></pre></p>"},{"location":"content/Day11/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li><code>st.multiselect</code></li> </ul>"},{"location":"content/Day12/","title":"st.checkbox","text":"<p><code>st.checkbox</code> muestra un componente de casilla de verificaci\u00f3n.</p>"},{"location":"content/Day12/#demo-app","title":"Demo app","text":""},{"location":"content/Day12/#codigo","title":"C\u00f3digo","text":"<p>Aqu\u00ed se explica c\u00f3mo usar <code>st.checkbox</code>: <pre><code>import streamlit as st\n\nst.header('st.checkbox')\n\nst.write ('What would you like to order?')\n\nicecream = st.checkbox('Ice cream')\ncoffee = st.checkbox('Coffee')\ncola = st.checkbox('Cola')\n\nif icecream:\n     st.write(\"Great! Here's some more \ud83c\udf66\")\n\nif coffee: \n     st.write(\"Okay, here's some coffee \u2615\")\n\nif cola:\n     st.write(\"Here you go \ud83e\udd64\")\n</code></pre></p>"},{"location":"content/Day12/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un encabezado para la aplicaci\u00f3n: <pre><code>st.header('st.checkbox')\n</code></pre></p> <p>A continuaci\u00f3n, haremos una pregunta a trav\u00e9s de <code>st.write</code>: <pre><code>st.write ('What would you like to order?')\n</code></pre></p> <p>Luego vamos a proporcionar algunos elementos de men\u00fa para seleccionar: <pre><code>icecream = st.checkbox('Ice cream')\ncoffee = st.checkbox('Coffee')\ncola = st.checkbox('Cola')\n</code></pre></p> <p>Finalmente, vamos a imprimir texto personalizado seg\u00fan la casilla de verificaci\u00f3n que se seleccion\u00f3: <pre><code>if icecream:\n     st.write(\"Great! Here's some more \ud83c\udf66\")\n\nif coffee: \n     st.write(\"Okay, here's some coffee \u2615\")\n\nif cola:\n     st.write(\"Here you go \ud83e\udd64\")\n</code></pre></p>"},{"location":"content/Day12/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li><code>st.checkbox</code></li> </ul>"},{"location":"content/Day13/","title":"Activar un entorno de desarrollo en la nube","text":""},{"location":"content/Day13/#gitpod","title":"GitPod","text":"<p>Para poner en marcha un entorno de desarrollo en la nube, podemos usar GitPod y esto se puede hacer simplemente haciendo clic en el siguiente enlace: - Pru\u00e9balo \ud83d\udc49 https://gitpod.io/#/https://github.com/dataprofessor/streamlit101/</p> <p>Como puede ver en la URL anterior, se agrega una URL del repositorio de GitHub despu\u00e9s de <code>https://gitpod.io/#/</code>, lo que esencialmente permite a GitPod activar un entorno de desarrollo utilizando las instrucciones contenidas en la URL del repositorio de GitHub (es decir, en el archivo <code>requirements.txt</code> que enumera espec\u00edficamente las librer\u00edas de Python para instalar).</p> <p>Nota: Hay otros entornos de desarrollo en la nube similares, como: - GitHub Codespaces - Replit - Cloud9</p>"},{"location":"content/Day14/","title":"Componentes de Streamlit","text":"<p>Los componentes son m\u00f3dulos Python de terceros que ampl\u00edan lo que es posible con Streamlit [1].</p>"},{"location":"content/Day14/#que-componentes-estan-disponibles","title":"Que componentes est\u00e1n disponibles?","text":"<p>Hay varias docenas de componentes de Streamlit que aparecen en el sitio web de Streamlit [2].</p> <p>Fanilo (un creador de Streamlit) seleccion\u00f3 una incre\u00edble lista de componentes de Streamlit en una publicaci\u00f3n wiki [3] que enumera alrededor de 85 componentes a partir de abril de 2022.</p>"},{"location":"content/Day14/#como-utilizar","title":"C\u00f3mo utilizar?","text":"<p>Los componentes Streamlit est\u00e1n a solo un pip de distancia.</p> <p>En este tutorial, comencemos a usar el componente <code>streamlit_pandas_profiling</code> [4].</p>"},{"location":"content/Day14/#instalar-el-componente","title":"Instalar el componente","text":"<pre><code>pip install streamlit_pandas_profiling\n</code></pre>"},{"location":"content/Day14/#demo-app","title":"Demo app","text":""},{"location":"content/Day14/#codigo","title":"C\u00f3digo","text":"<p>Aqu\u00ed se explica c\u00f3mo crear una aplicaci\u00f3n Streamlit usando un componente: <pre><code>import streamlit as st\nimport pandas as pd\nimport pandas_profiling\nfrom streamlit_pandas_profiling import st_profile_report\n\nst.header('`streamlit_pandas_profiling`')\n\ndf = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/penguins_cleaned.csv')\n\npr = df.profile_report()\nst_profile_report(pr)\n</code></pre></p>"},{"location":"content/Day14/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la biblioteca <code>streamlit</code> como <code>st</code>, as\u00ed como otras bibliotecas utilizadas en la aplicaci\u00f3n: <pre><code>import streamlit as st\nimport pandas as pd\nimport pandas_profiling\nfrom streamlit_pandas_profiling import st_profile_report\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un texto de encabezado para la aplicaci\u00f3n: <pre><code>st.header('`streamlit_pandas_profiling`')\n</code></pre></p> <p>A continuaci\u00f3n, cargamos el conjunto de datos de Penguins usando el comando <code>read_csv</code> de <code>pandas</code>. <pre><code>df = pd.read_csv('https://raw.githubusercontent.com/dataprofessor/data/master/penguins_cleaned.csv')\n</code></pre></p> <p>Finalmente, el informe de pandas se genera a trav\u00e9s del comando <code>profile_report()</code> y se muestra usando <code>st_profile_report</code>: <pre><code>pr = df.profile_report()\nst_profile_report(pr)\n</code></pre></p>"},{"location":"content/Day14/#fabricacion-de-sus-propios-componentes","title":"Fabricaci\u00f3n de sus propios componentes","text":"<p>Si est\u00e1 interesado en crear su propio componente, consulte los siguientes recursos: - Crear un componente - Publicar un componente - API de componentes - Publicaci\u00f3n de blog sobre componentes</p> <p>Alternativamente, si prefiere aprender usando videos, nuestro ingeniero Tim Conkling ha creado algunos tutoriales incre\u00edbles: - C\u00f3mo construir un componente Streamlit | Parte 1: configuraci\u00f3n y arquitectura - C\u00f3mo construir un componente Streamlit | Parte 2: Parte 2: Hacer un control deslizante</p>"},{"location":"content/Day14/#mas-lecturas-sobre-componentes","title":"M\u00e1s lecturas sobre Componentes","text":"<ol> <li>Componentes Streamlit - Documentaci\u00f3n API</li> <li>[Componentes destacados de Streamlit] (https://streamlit.io/components)</li> <li>Componentes Streamlit - Seguimiento de la comunidad</li> <li><code>streamlit_pandas_profiling</code></li> </ol>"},{"location":"content/Day15/","title":"st.latex","text":"<p><code>st.latex</code> muestra expresiones matem\u00e1ticas formateadas como LaTeX.</p>"},{"location":"content/Day15/#que-estamos-construyendo","title":"Qu\u00e9 estamos construyendo?","text":"<p>Una aplicaci\u00f3n simple que muestra una ecuaci\u00f3n matem\u00e1tica utilizando la sintaxis de LaTeX a trav\u00e9s del comando <code>st.latex</code>.</p>"},{"location":"content/Day15/#demo-app","title":"Demo app","text":""},{"location":"content/Day15/#codigo","title":"C\u00f3digo","text":"<p>As\u00ed es como se usa <code>st.latex</code>: <pre><code>import streamlit as st\n\nst.header('st.latex')\n\nst.latex(r'''\n     a + ar + a r^2 + a r^3 + \\cdots + a r^{n-1} =\n     \\sum_{k=0}^{n-1} ar^k =\n     a \\left(\\frac{1-r^{n}}{1-r}\\right)\n     ''')\n</code></pre></p>"},{"location":"content/Day15/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un texto de encabezado: <pre><code>st.header('st.latex')\n</code></pre></p> <p>A continuaci\u00f3n, mostramos la ecuaci\u00f3n matem\u00e1tica a trav\u00e9s de <code>st.latex</code>: <pre><code>st.latex(r'''\n     a + ar + a r^2 + a r^3 + \\cdots + a r^{n-1} =\n     \\sum_{k=0}^{n-1} ar^k =\n     a \\left(\\frac{1-r^{n}}{1-r}\\right)\n     ''')\n</code></pre></p>"},{"location":"content/Day15/#referencias","title":"Referencias","text":"<ul> <li>Obtenga m\u00e1s informaci\u00f3n sobre <code>st.latex</code> en la documentaci\u00f3n de la API de Streamlit.</li> </ul>"},{"location":"content/Day16/","title":"Personalizaci\u00f3n del tema de las aplicaciones Streamlit","text":"<p>Podemos personalizar el tema ajustando los par\u00e1metros en <code>config.toml</code>, que es un archivo de configuraci\u00f3n almacenado en la misma carpeta que la aplicaci\u00f3n en la carpeta <code>.streamlit</code>.</p>"},{"location":"content/Day16/#what-were-building","title":"What we're building?","text":"<p>Una simple aplicaci\u00f3n que muestra el resultado de la personalizaci\u00f3n de nuestro tema. Esto fue posible gracias a la personalizaci\u00f3n de c\u00f3digo HTML HEX dentro del archivo <code>.streamlit/config.toml</code>.</p>"},{"location":"content/Day16/#demo-app","title":"Demo app","text":""},{"location":"content/Day16/#codigo","title":"C\u00f3digo","text":"<p>Aqu\u00ed est\u00e1 el c\u00f3digo del archivo <code>streamlit_app.py</code>: <pre><code>import streamlit as st\n\nst.title('Customizing the theme of Streamlit apps')\n\nst.write('Contents of the `.streamlit/config.toml` file of this app')\n\nst.code(\"\"\"\n[theme]\nprimaryColor=\"#F39C12\"\nbackgroundColor=\"#2E86C1\"\nsecondaryBackgroundColor=\"#AED6F1\"\ntextColor=\"#FFFFFF\"\nfont=\"monospace\"\n\"\"\")\n\nnumber = st.sidebar.slider('Select a number:', 0, 10, 5)\nst.write('Selected number from slider widget is:', number)\n</code></pre></p> <p>Aqu\u00ed est\u00e1 el c\u00f3digo del archivo <code>.streamlit/config.toml</code>: <pre><code>[theme]\nprimaryColor=\"#F39C12\"\nbackgroundColor=\"#2E86C1\"\nsecondaryBackgroundColor=\"#AED6F1\"\ntextColor=\"#FFFFFF\"\nfont=\"monospace\"\n</code></pre></p>"},{"location":"content/Day16/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un t\u00edtulo para la aplicaci\u00f3n: <pre><code>st.title('Theming with config.toml')\n</code></pre></p> <p>A continuaci\u00f3n, vamos a mostrar el contenido del archivo <code>.streamlit/config.toml</code> por medio de <code>st.write</code> seguido por el c\u00f3digo real via <code>st.code</code>: <pre><code>st.write('Contents of the ./streamlit/config.toml file of this app')\n\nst.code(\"\"\"\n[theme]\nprimaryColor=\"#F39C12\"\nbackgroundColor=\"#2E86C1\"\nsecondaryBackgroundColor=\"#AED6F1\"\ntextColor=\"#FFFFFF\"\nfont=\"monospace\"\n\"\"\")\n</code></pre></p> <p>Finalmente, estamos creando un control deslizante en la barra lateral seguido de mostrar el n\u00famero seleccionado: <pre><code>number = st.sidebar.slider('Select a number:', 0, 10, 5)\nst.write('Selected number from slider widget is:', number)\n</code></pre></p> <p>Ahora echemos un vistazo a los colores personalizados que hemos usado en esta aplicaci\u00f3n, que se especifica en el archivo <code>.streamlit/config.toml</code>: - <code>primaryColor=\"#F39C12\"</code> - Esto establece el color primario en naranja. Observe los colores naranjas en el control deslizante. - <code>backgroundColor=\"#2E86C1\"</code> - Esto establece el color de fondo en azul. Observe que el panel principal tiene un color de fondo azul. - <code>secundarioBackgroundColor=\"#AED6F1\"</code> - Esto establece el color de fondo secundario en gris oscuro. Observe el color de fondo gris de la barra lateral y el color de fondo del cuadro de c\u00f3digo en el panel principal. - <code>textColor=\"#FFFFFF\"</code> - El color del texto se establece en blanco. - <code>font=\"monospace\"</code> - Esto establece la fuente en monoespaciado.</p>"},{"location":"content/Day16/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li>Tematizaci\u00f3n</li> <li>C\u00f3digos de color HTML es una gran herramienta para seleccionar colores de inter\u00e9s.</li> </ul>"},{"location":"content/Day17/","title":"st.secrets","text":"<p><code>st.secrets</code> le permite almacenar informaci\u00f3n confidencial, como claves API, contrase\u00f1as de bases de datos u otras credenciales.</p>"},{"location":"content/Day17/#demo-app","title":"Demo app","text":""},{"location":"content/Day17/#codigo","title":"C\u00f3digo","text":"<p>As\u00ed es como se usa <code>st.secrets</code>: <pre><code>import streamlit as st\n\nst.title('st.secrets')\n\nst.write(st.secrets['message'])\n</code></pre></p>"},{"location":"content/Day17/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un t\u00edtulo para la aplicaci\u00f3n: <pre><code>st.title('st.secrets')\n</code></pre></p> <p>Finalmente, mostraremos los secretos almacenados: <pre><code>st.write(st.secrets['message'])\n</code></pre></p> <p>Cabe se\u00f1alar que los secretos se pueden almacenar en Streamlit Community Cloud como se ve en las capturas de pantalla que se muestran a continuaci\u00f3n.</p> <p>Si esta trabajando localmente, pueden ser almacenadas en <code>.streamlit/secrets.toml</code>, pero aseg\u00farese evitar subir esto al repositorio de GitHub. </p>"},{"location":"content/Day17/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li>Agregue secretos a sus aplicaciones Streamlit</li> <li>Gesti\u00f3n de secretos</li> </ul>"},{"location":"content/Day18/","title":"st.file_uploader","text":"<p><code>st.file_uploader</code> muestra un componente para subir archivos [1].</p> <p>De forma predeterminada, los archivos cargados est\u00e1n limitados a 200 MB. Puede configurar esto usando server.maxUploadSize. Para obtener m\u00e1s informaci\u00f3n sobre utilizar las opciones de configuraci\u00f3n, consulte [2].</p>"},{"location":"content/Day18/#demo-app","title":"Demo app","text":""},{"location":"content/Day18/#codigo","title":"C\u00f3digo","text":"<p>Aqu\u00ed se explica c\u00f3mo usar <code>st.file_uploader</code>: <pre><code>import streamlit as st\nimport pandas as pd\n\nst.title('st.file_uploader')\n\nst.subheader('Input CSV')\nuploaded_file = st.file_uploader(\"Choose a file\")\n\nif uploaded_file is not None:\n  df = pd.read_csv(uploaded_file)\n  st.subheader('DataFrame')\n  st.write(df)\n  st.subheader('Descriptive Statistics')\n  st.write(df.describe())\nelse:\n  st.info('\u261d\ufe0f Upload a CSV file')\n</code></pre></p>"},{"location":"content/Day18/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> y otras de la siguiente manera: <pre><code>import streamlit as st\nimport pandas as pd\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un t\u00edtulo para la aplicaci\u00f3n: <pre><code>st.title('st.file_uploader')\n</code></pre></p> <p>A continuaci\u00f3n, usaremos <code>st.file_uploader</code> para mostrar un componente de carga de archivos: <pre><code>st.subheader('Input CSV')\nuploaded_file = st.file_uploader(\"Choose a file\")\n</code></pre></p> <p>Finalmente, definimos la condici\u00f3n para mostrar inicialmente un mensaje de bienvenida invitando a los usuarios a cargar su archivo (como se implementa en la condici\u00f3n <code>else</code>). Al cargar el archivo, la condici\u00f3n <code>if</code> se activa y la biblioteca <code>pandas</code> lee el archivo CSV y lo muestra a trav\u00e9s del comando <code>st.write</code>. <pre><code>if uploaded_file is not None:\n  df = pd.read_csv(uploaded_file)\n  st.subheader('DataFrame')\n  st.write(df)\n  st.subheader('Descriptive Statistics')\n  st.write(df.describe())\nelse:\n  st.info('\u261d\ufe0f Upload a CSV file')\n</code></pre></p>"},{"location":"content/Day18/#otras-lecturas","title":"Otras lecturas","text":"<ol> <li><code>st.file_uploader</code></li> <li>Establecer opciones de configuraci\u00f3n</li> </ol>"},{"location":"content/Day19/","title":"C\u00f3mo dise\u00f1ar su aplicaci\u00f3n Streamlit","text":"<p>En este tutorial, usaremos los siguientes comandos para dise\u00f1ar nuestra aplicaci\u00f3n Streamlit: - <code>st.set_page_config(layout=\"wide\")</code> - Muestra el contenido de la aplicaci\u00f3n en modo ancho (de lo contrario, de forma predeterminada, el contenido se encapsula en un cuadro de ancho fijo). - <code>st.sidebar</code> - Coloca los componentes o visualizaciones de texto/imagen en la barra lateral. - <code>st.expander</code> - Coloca visualizaciones de texto/imagen dentro de una caja contenedora plegable. - <code>st.columns</code> - Crea un espacio tabular (o columna) para contener lo que necesites.</p>"},{"location":"content/Day19/#demo-app","title":"Demo app","text":""},{"location":"content/Day19/#codigo","title":"C\u00f3digo","text":"<p>Aqu\u00ed le mostramos c\u00f3mo personalizar el dise\u00f1o de su aplicaci\u00f3n Streamlit: <pre><code>import streamlit as st\n\nst.set_page_config(layout=\"wide\")\n\nst.title('How to layout your Streamlit app')\n\nwith st.expander('About this app'):\n  st.write('This app shows the various ways on how you can layout your Streamlit app.')\n  st.image('https://streamlit.io/images/brand/streamlit-logo-secondary-colormark-darktext.png', width=250)\n\nst.sidebar.header('Input')\nuser_name = st.sidebar.text_input('What is your name?')\nuser_emoji = st.sidebar.selectbox('Choose an emoji', ['', '\ud83d\ude04', '\ud83d\ude06', '\ud83d\ude0a', '\ud83d\ude0d', '\ud83d\ude34', '\ud83d\ude15', '\ud83d\ude31'])\nuser_food = st.sidebar.selectbox('What is your favorite food?', ['', 'Tom Yum Kung', 'Burrito', 'Lasagna', 'Hamburger', 'Pizza'])\n\nst.header('Output')\n\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n  if user_name != '':\n    st.write(f'\ud83d\udc4b Hello {user_name}!')\n  else:\n    st.write('\ud83d\udc48  Please enter your **name**!')\n\nwith col2:\n  if user_emoji != '':\n    st.write(f'{user_emoji} is your favorite **emoji**!')\n  else:\n    st.write('\ud83d\udc48 Please choose an **emoji**!')\n\nwith col3:\n  if user_food != '':\n    st.write(f'\ud83c\udf74 **{user_food}** is your favorite **food**!')\n  else:\n    st.write('\ud83d\udc48 Please choose your favorite **food**!')\n</code></pre></p>"},{"location":"content/Day19/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>Comenzaremos definiendo primero el dise\u00f1o de la p\u00e1gina que se mostrar\u00e1 en el modo \"wide\" (ancho), lo que permite que el contenido de la p\u00e1gina se expanda al ancho del navegador. <pre><code>st.set_page_config(layout=\"wide\")\n</code></pre></p> <p>A continuaci\u00f3n, le daremos un t\u00edtulo a la aplicaci\u00f3n Streamlit. <pre><code>st.title('How to layout your Streamlit app')\n</code></pre></p> <p>Un cuadro expandible titulado <code>About this app</code> se coloca debajo del t\u00edtulo de la aplicaci\u00f3n. Tras la expansi\u00f3n, veremos detalles adicionales. <pre><code>with st.expander('About this app'):\n  st.write('This app shows the various ways on how you can layout your Streamlit app.')\n  st.image('https://streamlit.io/images/brand/streamlit-logo-secondary-colormark-darktext.png', width=250)\n</code></pre></p> <p>Los componentes que aceptan datos de entrada se posicionan en la barra lateral utilizando el comando <code>st.sidebar</code> previo a los comandos <code>text_input</code> y <code>selectbox</code>. Los datos ingresados o seleccionados por el usuario son asignados y guardados en las variables <code>user_name</code>, <code>user_emoji</code> y <code>user_food</code>. <pre><code>st.sidebar.header('Input')\nuser_name = st.sidebar.text_input('What is your name?')\nuser_emoji = st.sidebar.selectbox('Choose an emoji', ['', '\ud83d\ude04', '\ud83d\ude06', '\ud83d\ude0a', '\ud83d\ude0d', '\ud83d\ude34', '\ud83d\ude15', '\ud83d\ude31'])\nuser_food = st.sidebar.selectbox('What is your favorite food?', ['', 'Tom Yum Kung', 'Burrito', 'Lasagna', 'Hamburger', 'Pizza'])\n</code></pre></p> <p>Finalmente, crearemos 3 columnas usando el comando <code>st.columns</code> que corresponde a <code>col1</code>, <code>col2</code> y <code>col3</code>. Luego, asignamos contenidos a cada una de las columnas mediante la creaci\u00f3n de bloques de c\u00f3digo individuales que comienzan con la instrucci\u00f3n <code>with</code>. Debajo de esto, creamos declaraciones condicionales que muestran 1 de 2 textos alternativos dependiendo de si el usuario proporcion\u00f3 datos (especificados en la barra lateral) o no. De forma predeterminada, la p\u00e1gina muestra texto debajo de la instrucci\u00f3n <code>else</code>. Al proporcionar datos, la informaci\u00f3n correspondiente del usuario se muestra bajo el encabezado <code>Output</code>. <pre><code>st.header('Output')\n\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n  if user_name != '':\n    st.write(f'\ud83d\udc4b Hello {user_name}!')\n  else:\n    st.write('\ud83d\udc48  Please enter your **name**!')\n\nwith col2:\n  if user_emoji != '':\n    st.write(f'{user_emoji} is your favorite **emoji**!')\n  else:\n    st.write('\ud83d\udc48 Please choose an **emoji**!')\n\nwith col3:\n  if user_food != '':\n    st.write(f'\ud83c\udf74 **{user_food}** is your favorite **food**!')\n  else:\n    st.write('\ud83d\udc48 Please choose your favorite **food**!')\n</code></pre> Tambi\u00e9n vale la pena se\u00f1alar que las cadenas <code>f</code> se usaron para combinar texto preestablecido junto con los valores proporcionados por el usuario.</p>"},{"location":"content/Day19/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li>Dise\u00f1os y contenedores</li> </ul>"},{"location":"content/Day2/","title":"Construyendo tu primer Streamlit app","text":""},{"location":"content/Day2/#enciende-tu-ide","title":"Enciende tu IDE","text":"<p>Utiliza tu IDE cual sea fuera Atom, VS Code o incluso un IDE en la nube tal como GitPod o GitHub.dev. </p> <p>Crea un archivo con el nombre <code>streamlit_app.py</code></p>"},{"location":"content/Day2/#ingresando-tus-primeras-lineas-de-codigo","title":"Ingresando tus primeras lineas de c\u00f3digo","text":"<p>En el archivo recientemente creado, ingresa las siguientes lineas de c\u00f3digo:</p> <pre><code>import streamlit as st\n\nst.write('Hello world!')\n</code></pre> <p>Guarda el archivo.</p>"},{"location":"content/Day2/#enciende-tu-terminal-de-linea-de-comandos","title":"Enciende tu terminal de linea de comandos","text":"<p>En la terminal, ingresar lo siguiente:</p> <pre><code>streamlit run streamlit_app.py\n</code></pre> <p>Una ventana de tu explorador deber\u00eda abrirse mostrando la Streamlit app reci\u00e9n creada.</p> <p>Felicitaciones! Acabas de crear tu primera Streamlit app!</p>"},{"location":"content/Day20/","title":"Tech Twitter Space sobre \u00bfQu\u00e9 es Streamlit?","text":""},{"location":"content/Day20/#presentado-por-francesco-ciulla","title":"(Presentado por Francesco Ciulla)","text":"<p>\u00danase a nosotros para una discusi\u00f3n sobre Streamlit con nuestro anfitri\u00f3n [Francesco Ciulla] (https://twitter.com/FrancescoCiull4).</p> <p>\ud83d\udc49 Enlace: https://twitter.com/i/spaces/1dRJZlbglXMKB </p>"},{"location":"content/Day21/","title":"st.progress","text":"<p><code>st.progress</code> muestra una barra de progreso que se actualiza gr\u00e1ficamente a medida que avanza la iteraci\u00f3n.</p>"},{"location":"content/Day21/#demo-app","title":"Demo app","text":""},{"location":"content/Day21/#codigo","title":"C\u00f3digo","text":"<p>As\u00ed es como se usa <code>st.progress</code>: <pre><code>import streamlit as st\nimport time\n\nst.title('st.progress')\n\nwith st.expander('About this app'):\n     st.write('You can now display the progress of your calculations in a Streamlit app with the `st.progress` command.')\n\nmy_bar = st.progress(0)\n\nfor percent_complete in range(100):\n     time.sleep(0.05)\n     my_bar.progress(percent_complete + 1)\n\nst.balloons()\n</code></pre></p>"},{"location":"content/Day21/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> junto con <code>time</code> de la siguiente manera: <pre><code>import streamlit as st\nimport time\n</code></pre></p> <p>A continuaci\u00f3n, creamos un t\u00edtulo para la aplicaci\u00f3n: <pre><code>st.title('st.progress')\n</code></pre></p> <p>Se crea un cuadro Acerca de usando <code>st.expander</code> y la descripci\u00f3n se muestra a trav\u00e9s de <code>st.write</code>: <pre><code>with st.expander('About this app'):\n     st.write('You can now display the progress of your calculations in a Streamlit app with the `st.progress` command.')\n</code></pre></p> <p>Finalmente, definimos una barra de progreso y la instanciamos con un valor inicial <code>0</code>. Luego, un ciclo <code>for</code> va a iterar desde <code>0</code> hasta <code>100</code>. Por cada iteraci\u00f3n, usamos <code>time.sleep(0.05)</code> para permitir a la aplicaci\u00f3n esperar durante <code>0.05</code> antes de sumar <code>1</code> a la barra de progreso <code>my_bar</code> y al hacerlo, la representaci\u00f3n gr\u00e1fica de la barra aumenta con cada iteraci\u00f3n. <pre><code>my_bar = st.progress(0)\n\nfor percent_complete in range(100):\n     time.sleep(0.05)\n     my_bar.progress(percent_complete + 1)\n\nst.balloons()\n</code></pre></p>"},{"location":"content/Day21/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li><code>st.progress</code></li> </ul>"},{"location":"content/Day22/","title":"st.form","text":"<p><code>st.form</code> crea un formulario que agrupa los elementos junto con un bot\u00f3n \"Enviar\".</p> <p>Por lo general, cada vez que un usuario interact\u00faa con un componente, Streamlit se vuelve a ejecutar.</p> <p>Un formulario es un contenedor que agrupa visualmente otros elementos y componentes, y contiene un bot\u00f3n Enviar. Aqu\u00ed, un usuario puede interactuar con uno o m\u00e1s componentes tantas veces como quiera sin provocar una repetici\u00f3n. Finalmente, cuando se presiona el bot\u00f3n Enviar del formulario, todos los valores dentro del formulario se enviar\u00e1n a Streamlit en un solo lote.</p> <p>Para agregar elementos a un objeto de formulario, puede usar la notaci\u00f3n <code>with</code> (preferida) o puede usarla como un objeto simplemente llamando m\u00e9todos directamente en el formulario (primero asign\u00e1ndolo a una variable y luego aplicando m\u00e9todos subsecuentemente). Ver en la aplicaci\u00f3n de ejemplo.</p> <p>Los formularios tienen algunas restricciones: - Cada formulario debe contener un <code>st.form_submit_button</code>. - <code>st.button</code> y <code>st.download_button</code> no se pueden agregar a un formulario. - Los formularios pueden aparecer en cualquier lugar de su aplicaci\u00f3n (barra lateral, columnas, etc.), pero no se pueden incrustar dentro de otros formularios.</p> <p>Para obtener m\u00e1s informaci\u00f3n sobre los formularios, consulte nuestra publicaci\u00f3n de blog.</p>"},{"location":"content/Day22/#demo-app","title":"Demo app","text":""},{"location":"content/Day22/#codigo","title":"C\u00f3digo","text":"<p>He aqu\u00ed c\u00f3mo usar <code>st.form</code>: <pre><code>import streamlit as st\n\nst.title('st.form')\n\n# Full example of using the with notation\nst.header('1. Example of using `with` notation')\nst.subheader('Coffee machine')\n\nwith st.form('my_form'):\n    st.write('**Order your coffee**')\n\n    # Input widgets\n    coffee_bean_val = st.selectbox('Coffee bean', ['Arabica', 'Robusta'])\n    coffee_roast_val = st.selectbox('Coffee roast', ['Light', 'Medium', 'Dark'])\n    brewing_val = st.selectbox('Brewing method', ['Aeropress', 'Drip', 'French press', 'Moka pot', 'Siphon'])\n    serving_type_val = st.selectbox('Serving format', ['Hot', 'Iced', 'Frappe'])\n    milk_val = st.select_slider('Milk intensity', ['None', 'Low', 'Medium', 'High'])\n    owncup_val = st.checkbox('Bring own cup')\n\n    # Every form must have a submit button\n    submitted = st.form_submit_button('Submit')\n\nif submitted:\n    st.markdown(f'''\n        \u2615 You have ordered:\n        - Coffee bean: `{coffee_bean_val}`\n        - Coffee roast: `{coffee_roast_val}`\n        - Brewing: `{brewing_val}`\n        - Serving type: `{serving_type_val}`\n        - Milk: `{milk_val}`\n        - Bring own cup: `{owncup_val}`\n        ''')\nelse:\n    st.write('\u261d\ufe0f Place your order!')\n\n\n# Short example of using an object notation\nst.header('2. Example of object notation')\n\nform = st.form('my_form_2')\nselected_val = form.slider('Select a value')\nform.form_submit_button('Submit')\n\nst.write('Selected value: ', selected_val)\n</code></pre></p>"},{"location":"content/Day22/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un t\u00edtulo para la aplicaci\u00f3n: <pre><code>st.title('st.form')\n</code></pre></p>"},{"location":"content/Day22/#primer-ejemplo","title":"Primer ejemplo","text":"<p>Comencemos con el primer ejemplo, aqu\u00ed aplicaremos el comando <code>st.form</code> a trav\u00e9s de la notaci\u00f3n <code>write</code>. Dentro del formulario, comenzaremos escribiendo un subt\u00edtulo <code>Order your coffee</code> y luego crearemos varios componentes (<code>st.selectbox</code>, <code>st.select_slider</code> y <code>st.checkbox</code>) para recopilar informaci\u00f3n sobre el pedido de caf\u00e9. Finalmente, se crea un bot\u00f3n de env\u00edo a trav\u00e9s del comando <code>st.form_submit_button</code>, que cuando se hace clic en \u00e9l enviar\u00e1 todos los datos del usuario de una sola vez para su procesamiento. <pre><code># Full example of using the with notation\nst.header('1. Example of using `with` notation')\nst.subheader('Coffee machine')\n\nwith st.form('my_form'):\n    st.subheader('**Order your coffee**')\n\n    coffee_bean_val = st.selectbox('Coffee bean', ['Arabica', 'Robusta'])\n    coffee_roast_val = st.selectbox('Coffee roast', ['Light', 'Medium', 'Dark'])\n    brewing_val = st.selectbox('Brewing method', ['Aeropress', 'Drip', 'French press', 'Moka pot', 'Siphon'])\n    serving_type_val = st.selectbox('Serving format', ['Hot', 'Iced', 'Frappe'])\n    milk_val = st.select_slider('Milk intensity', ['None', 'Low', 'Medium', 'High'])\n    owncup_val = st.checkbox('Bring own cup')\n\n    # Every form must have a submit button.\n    submitted = st.form_submit_button('Submit')\n</code></pre></p> <p>A continuaci\u00f3n, agregaremos la l\u00f3gica de lo que sucede despu\u00e9s de hacer clic en el bot\u00f3n Enviar. De forma predeterminada, cada vez que se carga Streamlit, se ejecutar\u00e1 la instrucci\u00f3n <code>else</code> y veremos el mensaje <code>\u261d\ufe0f Place your order!</code>. Mientras que al hacer clic en el bot\u00f3n Enviar, todas los datos proporcionadas por el usuario a trav\u00e9s de los diversos componentes se almacenan en varias variables (por ejemplo, <code>coffee_bean_val</code>, <code>coffee_roast_val</code>, etc.) y se imprimen mediante el comando <code>st.markdown</code> con la ayuda de f-string. <pre><code>if submitted:\n    st.markdown(f'''\n        \u2615 You have ordered:\n        - Coffee bean: `{coffee_bean_val}`\n        - Coffee roast: `{coffee_roast_val}`\n        - Brewing: `{brewing_val}`\n        - Serving type: `{serving_type_val}`\n        - Milk: `{milk_val}`\n        - Bring own cup: `{owncup_val}`\n        ''')\nelse:\n    st.write('\u261d\ufe0f Place your order!')\n</code></pre></p>"},{"location":"content/Day22/#segundo-ejemplo","title":"Segundo ejemplo","text":"<p>Pasemos ahora al segundo ejemplo sobre el uso de <code>st.form</code> como una notaci\u00f3n de objeto. Aqu\u00ed, el comando <code>st.form</code> se asigna a la variable <code>form</code>. Posteriormente, se aplican varios comandos Streamlit como <code>slider</code> o <code>form_submit_button</code> en la variable <code>form</code>. <pre><code># Short example of using an object notation\nst.header('2. Example of object notation')\n\nform = st.form('my_form_2')\nselected_val = form.slider('Select a value')\nform.form_submit_button('Submit')\n\nst.write('Selected value: ', selected_val)\n</code></pre></p>"},{"location":"content/Day22/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li><code>st.form</code></li> <li>Presentamos el bot\u00f3n Enviar y los formularios</li> </ul>"},{"location":"content/Day23/","title":"st.experimental_get_query_params","text":"<p><code>st.experimental_get_query_params</code> permite obtener los datos de la url proveniente del navegador del usuario.</p>"},{"location":"content/Day23/#demo-app","title":"Demo app","text":"<ol> <li>El siguiente enlace carga la aplicaci\u00f3n de ejemplo sin par\u00e1metros de consulta (observe el mensaje de error):</li> </ol> <ol> <li>El siguiente enlace carga la aplicaci\u00f3n de ejemplo con par\u00e1metros de consulta (no hay mensaje de error aqu\u00ed):</li> </ol>"},{"location":"content/Day23/#codigo","title":"C\u00f3digo","text":"<p>Aqu\u00ed se explica c\u00f3mo usar <code>st.experimental_get_query_params</code>: <pre><code>import streamlit as st\n\nst.title('st.experimental_get_query_params')\n\nwith st.expander('About this app'):\n  st.write(\"`st.experimental_get_query_params` allows the retrieval of query parameters directly from the URL of the user's browser.\")\n\n# 1. Instructions\nst.header('1. Instructions')\nst.markdown('''\nIn the above URL bar of your internet browser, append the following:\n`?name=Jack&amp;surname=Beanstalk`\nafter the base URL `http://share.streamlit.io/dataprofessor/st.experimental_get_query_params/`\nsuch that it becomes \n`http://share.streamlit.io/dataprofessor/st.experimental_get_query_params/?firstname=Jack&amp;surname=Beanstalk`\n''')\n\n\n# 2. Contents of st.experimental_get_query_params\nst.header('2. Contents of st.experimental_get_query_params')\nst.write(st.experimental_get_query_params())\n\n\n# 3. Retrieving and displaying information from the URL\nst.header('3. Retrieving and displaying information from the URL')\n\nfirstname = st.experimental_get_query_params()['firstname'][0]\nsurname = st.experimental_get_query_params()['surname'][0]\n\nst.write(f'Hello **{firstname} {surname}**, how are you?')\n</code></pre></p>"},{"location":"content/Day23/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>A continuaci\u00f3n, le daremos un t\u00edtulo a la aplicaci\u00f3n: <pre><code>st.title('st.experimental_get_query_params')\n</code></pre></p> <p>Agreguemos tambi\u00e9n un cuadro desplegable: <pre><code>with st.expander('About this app'):\n  st.write(\"`st.experimental_get_query_params` allows the retrieval of query parameters directly from the URL of the user's browser.\")\n</code></pre></p> <p>Luego, proporcionaremos instrucciones a los visitantes de la aplicaci\u00f3n sobre c\u00f3mo pueden pasar los par\u00e1metros directamente a la URL: <pre><code># 1. Instructions\nst.header('1. Instructions')\nst.markdown('''\nIn the above URL bar of your internet browser, append the following:\n`?name=Jack&amp;surname=Beanstalk`\nafter the base URL `http://share.streamlit.io/dataprofessor/st.experimental_get_query_params/`\nsuch that it becomes \n`http://share.streamlit.io/dataprofessor/st.experimental_get_query_params/?firstname=Jack&amp;surname=Beanstalk`\n''')\n</code></pre></p> <p>Posteriormente, mostraremos el contenido del comando <code>st.experimental_get_query_params</code>. <pre><code># 2. Contents of st.experimental_get_query_params\nst.header('2. Contents of st.experimental_get_query_params')\nst.write(st.experimental_get_query_params())\n</code></pre></p> <p>Finalmente, seleccionaremos y mostraremos informaci\u00f3n dependiendo de los par\u00e1metros de la URL: <pre><code># 3. Retrieving and displaying information from the URL\nst.header('3. Retrieving and displaying information from the URL')\n\nfirstname = st.experimental_get_query_params()['firstname'][0]\nsurname = st.experimental_get_query_params()['surname'][0]\n\nst.write(f'Hello **{firstname} {surname}**, how are you?')\n</code></pre></p>"},{"location":"content/Day23/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li><code>st.experimental_get_query_params</code></li> </ul>"},{"location":"content/Day24/","title":"st.cache","text":"<p><code>st.cache</code> le permite optimizar el rendimiento de su aplicaci\u00f3n Streamlit.</p> <p>Streamlit proporciona un mecanismo de almacenamiento en cach\u00e9 que permite que su aplicaci\u00f3n siga funcionando correctamente incluso cuando carga datos de la web, manipula grandes conjuntos de datos o realiza c\u00e1lculos costosos. Esto se hace con el decorador <code>@st.cache</code>.</p> <p>Cuando marca una funci\u00f3n con el decorador @st.cache, le dice a Streamlit que cada vez que se llama a la funci\u00f3n, debe verificar algunas cosas:</p> <ol> <li>Los par\u00e1metros con los que llamaste a la funci\u00f3n</li> <li>El valor de cualquier variable externa utilizada en la funci\u00f3n</li> <li>El cuerpo de la funci\u00f3n</li> <li>El cuerpo de cualquier funci\u00f3n utilizada dentro de la funci\u00f3n en cach\u00e9</li> </ol> <p>Si esta es la primera vez que Streamlit ve estos cuatro componentes con estos valores exactos y en esta combinaci\u00f3n y orden exactos, ejecuta la funci\u00f3n y almacena el resultado en un cach\u00e9 local. Luego, la pr\u00f3xima vez que se llame a la funci\u00f3n almacenada en cach\u00e9, si ninguno de estos componentes cambi\u00f3, Streamlit simplemente omitir\u00e1 la ejecuci\u00f3n de la funci\u00f3n por completo y, en su lugar, devolver\u00e1 la salida previamente almacenada en el cach\u00e9.</p> <p>La forma en que Streamlit realiza un seguimiento de los cambios en estos componentes es a trav\u00e9s del hash. Piense en la memoria cach\u00e9 como un almac\u00e9n de clave-valor en memoria, donde la clave es un hash de todo lo anterior y el valor es el resultado real pasado por referencia.</p> <p>Finalmente, <code>@st.cache</code> admite argumentos para configurar el comportamiento del cach\u00e9. Puede encontrar m\u00e1s informaci\u00f3n sobre ellos en la referencia de nuestra API.</p>"},{"location":"content/Day24/#como-utilizar","title":"C\u00f3mo utilizar?","text":"<p>Simplemente puede agregar el decorador <code>st.cache</code> en la l\u00ednea anterior de una funci\u00f3n que ha definido en su aplicaci\u00f3n Streamlit. Vea el ejemplo a continuaci\u00f3n.</p>"},{"location":"content/Day24/#demo-app","title":"Demo app","text":""},{"location":"content/Day24/#codigo","title":"C\u00f3digo","text":"<p>As\u00ed es como se usa <code>st.cache</code>: <pre><code>import streamlit as st\nimport numpy as np\nimport pandas as pd\nfrom time import time\n\nst.title('st.cache')\n\n# Using cache\na0 = time()\nst.subheader('Using st.cache')\n\n@st.cache(suppress_st_warning=True)\ndef load_data_a():\n  df = pd.DataFrame(\n    np.random.rand(2000000, 5),\n    columns=['a', 'b', 'c', 'd', 'e']\n  )\n  return df\n\nst.write(load_data_a())\na1 = time()\nst.info(a1-a0)\n\n\n# Not using cache\nb0 = time()\nst.subheader('Not using st.cache')\n\ndef load_data_b():\n  df = pd.DataFrame(\n    np.random.rand(2000000, 5),\n    columns=['a', 'b', 'c', 'd', 'e']\n  )\n  return df\n\nst.write(load_data_b())\nb1 = time()\nst.info(b1-b0)\n</code></pre></p>"},{"location":"content/Day24/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code>, as\u00ed como otras librer\u00edas utilizadas, de la siguiente manera: <pre><code>import streamlit as st\nimport numpy as np\nimport pandas as pd\nfrom time import time\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un t\u00edtulo para la aplicaci\u00f3n: <pre><code>st.title('Streamlit Cache')\n</code></pre></p> <p>A continuaci\u00f3n, definiremos 2 funciones para generar un DataFrame grande donde la primera utiliza el decorador <code>st.cache</code> mientras que la segunda no: <pre><code>@st.cache(suppress_st_warning=True)\ndef load_data_a():\n  df = pd.DataFrame(\n    np.random.rand(1000000, 5),\n    columns=['a', 'b', 'c', 'd', 'e']\n  )\n  return df\n\ndef load_data_b():\n  df = pd.DataFrame(\n    np.random.rand(1000000, 5),\n    columns=['a', 'b', 'c', 'd', 'e']\n  )\n  return df\n</code></pre></p> <p>Finalmente, ejecutamos la funci\u00f3n mientras cronometramos el tiempo de ejecuci\u00f3n usando el comando <code>time()</code>. <pre><code># Using cache\na0 = time()\nst.subheader('Using st.cache')\n\n# We insert the load_data_a function here\n\nst.write(load_data_a())\na1 = time()\nst.info(a1-a0)\n\n# Not using cache\nb0 = time()\nst.subheader('Not using st.cache')\n\n# We insert the load_data_b function here\n\nst.write(load_data_b())\nb1 = time()\nst.info(b1-b0)\n</code></pre></p> <p>Observe c\u00f3mo la primera ejecuci\u00f3n puede proporcionar un tiempo de ejecuci\u00f3n m\u00e1s o menos similar. Vuelva a cargar la aplicaci\u00f3n y observe c\u00f3mo cambia el tiempo de ejecuci\u00f3n al usar el decorador <code>st.cache</code>. \u00bfObserv\u00f3 alg\u00fan aumento de velocidad?</p>"},{"location":"content/Day24/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li>Documentaci\u00f3n de la API <code>st.cache</code></li> <li>Optimizar el rendimiento con <code>st.cache</code></li> <li>Primitivos de cach\u00e9 experimentales</li> <li><code>st.experimental_memo</code></li> <li><code>st.experimental_singleton</code></li> </ul>"},{"location":"content/Day25/","title":"st.session_state","text":"<p>Definimos el acceso a una aplicaci\u00f3n Streamlit en una pesta\u00f1a del navegador como una sesi\u00f3n. Para cada pesta\u00f1a del navegador que se conecta al servidor Streamlit, se crea una nueva sesi\u00f3n. Streamlit se vuelve a ejecutar de arriba a abajo cada vez que se interact\u00faa con la misma. Cada repetici\u00f3n se realiza en blanco: no se comparten variables entre ejecuciones.</p> <p>Session State es una forma de compartir variables entre ejecuciones, para cada sesi\u00f3n de usuario. Adem\u00e1s de la capacidad de almacenar y conservar el estado, Streamlit tambi\u00e9n expone la capacidad de manipular el estado mediante Callbacks.</p> <p>En este tutorial, ilustraremos el uso de Session State y los Callbacks a medida que construimos una aplicaci\u00f3n de conversi\u00f3n de peso.</p> <p><code>st.session_state</code> permite la implementaci\u00f3n de Session State en una aplicaci\u00f3n Streamlit.</p>"},{"location":"content/Day25/#demo-app","title":"Demo app","text":""},{"location":"content/Day25/#code","title":"Code","text":"<p>Aqu\u00ed se explica c\u00f3mo usar <code>st.session_state</code>: <pre><code>import streamlit as st\n\nst.title('st.session_state')\n\ndef lbs_to_kg():\n  st.session_state.kg = st.session_state.lbs/2.2046\ndef kg_to_lbs():\n  st.session_state.lbs = st.session_state.kg*2.2046\n\nst.header('Input')\ncol1, spacer, col2 = st.columns([2,1,2])\nwith col1:\n  pounds = st.number_input(\"Pounds:\", key = \"lbs\", on_change = lbs_to_kg)\nwith col2:\n  kilogram = st.number_input(\"Kilograms:\", key = \"kg\", on_change = kg_to_lbs)\n\nst.header('Output')\nst.write(\"st.session_state object:\", st.session_state)\n</code></pre></p>"},{"location":"content/Day25/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>En primer lugar, comenzaremos creando el t\u00edtulo de la aplicaci\u00f3n: <pre><code>st.title('st.session_state')\n</code></pre></p> <p>A continuaci\u00f3n, definimos funciones para la conversi\u00f3n de peso de libras a kg y viceversa: <pre><code>def lbs_to_kg():\n  st.session_state.kg = st.session_state.lbs/2.2046\ndef kg_to_lbs():\n  st.session_state.lbs = st.session_state.kg*2.2046\n</code></pre></p> <p>Aqu\u00ed, usamos <code>st.number_input</code> para permitir el ingreso de datos num\u00e9ricos de los valores de peso: <pre><code>st.header('Input')\ncol1, spacer, col2 = st.columns([2,1,2])\nwith col1:\n  pounds = st.number_input(\"Pounds:\", key = \"lbs\", on_change = lbs_to_kg)\nwith col2:\n  kilogram = st.number_input(\"Kilograms:\", key = \"kg\", on_change = kg_to_lbs)\n</code></pre> Las 2 funciones anteriores se activar\u00e1n tan pronto como se ingrese un valor en el campo num\u00e9rico creado con el comando <code>st.number_input</code>. Observe c\u00f3mo la opci\u00f3n <code>on_change</code> especifica las 2 funciones <code>lbs_to_kg</code> y <code>kg_to_lbs</code>).</p> <p>En pocas palabras, al ingresar un n\u00famero en el campo <code>st.number_input</code>, estas funciones convierten el n\u00famero.</p> <p>Finalmente, los valores de peso en unidades <code>kg</code> y <code>lbs</code> almacenados en el estado de la sesi\u00f3n como <code>st.session_state.kg</code> y <code>st.session_state.lbs</code> se imprimir\u00e1n a trav\u00e9s de <code>st.write</code>: <pre><code>st.header('Output')\nst.write(\"st.session_state object:\", st.session_state)\n</code></pre></p> <ul> <li>Estado de la sesi\u00f3n</li> <li>Agregar estado a las aplicaciones</li> </ul>"},{"location":"content/Day25/#otras-lecturas","title":"Otras lecturas","text":""},{"location":"content/Day26/","title":"C\u00f3mo usar la API creando la aplicaci\u00f3n Bored API","text":"<p>\u00a1La aplicaci\u00f3n Bored API sugiere cosas divertidas para que hagas cuando est\u00e9s aburrido!</p> <p>T\u00e9cnicamente, tambi\u00e9n demuestra el uso de API desde dentro de una aplicaci\u00f3n Streamlit.</p>"},{"location":"content/Day26/#demo-app","title":"Demo app","text":""},{"location":"content/Day26/#codigo","title":"C\u00f3digo","text":"<p>Aqu\u00ed se explica c\u00f3mo implementar la aplicaci\u00f3n Bored-API: <pre><code>import streamlit as st\nimport requests\n\nst.title('\ud83c\udfc0 Bored API app')\n\nst.sidebar.header('Input')\nselected_type = st.sidebar.selectbox('Select an activity type', [\"education\", \"recreational\", \"social\", \"diy\", \"charity\", \"cooking\", \"relaxation\", \"music\", \"busywork\"])\n\nsuggested_activity_url = f'http://www.boredapi.com/api/activity?type={selected_type}'\njson_data = requests.get(suggested_activity_url)\nsuggested_activity = json_data.json()\n\nc1, c2 = st.columns(2)\nwith c1:\n  with st.expander('About this app'):\n    st.write('Are you bored? The **Bored API app** provides suggestions on activities that you can do when you are bored. This app is powered by the Bored API.')\nwith c2:\n  with st.expander('JSON data'):\n    st.write(suggested_activity)\n\nst.header('Suggested activity')\nst.info(suggested_activity['activity'])\n\ncol1, col2, col3 = st.columns(3)\nwith col1:\n  st.metric(label='Number of Participants', value=suggested_activity['participants'], delta='')\nwith col2:\n  st.metric(label='Type of Activity', value=suggested_activity['type'].capitalize(), delta='')\nwith col3:\n  st.metric(label='Price', value=suggested_activity['price'], delta='')\n</code></pre></p>"},{"location":"content/Day26/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> y la tambi\u00e9n <code>requests</code> de la siguiente manera: <pre><code>import streamlit as st\nimport requests\n</code></pre></p> <p>El t\u00edtulo de la aplicaci\u00f3n se muestra a trav\u00e9s de <code>st.title</code>: <pre><code>st.title('\ud83c\udfc0 Bored API app')\n</code></pre></p> <p>A continuaci\u00f3n, aceptaremos el tipo de actividad mediante el comando <code>st.selectbox</code>: <pre><code>st.sidebar.header('Input')\nselected_type = st.sidebar.selectbox('Select an activity type', [\"education\", \"recreational\", \"social\", \"diy\", \"charity\", \"cooking\", \"relaxation\", \"music\", \"busywork\"])\n</code></pre></p> <p>La actividad seleccionada mencionada anteriormente se agrega a la URL a trav\u00e9s de f-string, que luego se usa para recuperar los datos JSON resultantes: <pre><code>suggested_activity_url = f'http://www.boredapi.com/api/activity?type={selected_type}'\njson_data = requests.get(suggested_activity_url)\nsuggested_activity = json_data.json()\n</code></pre></p> <p>Aqu\u00ed, mostraremos informaci\u00f3n sobre la aplicaci\u00f3n y los datos JSON a trav\u00e9s del comando <code>st.expander</code>. <pre><code>c1, c2 = st.columns(2)\nwith c1:\n  with st.expander('About this app'):\n    st.write('Are you bored? The **Bored API app** provides suggestions on activities that you can do. This app is powered by the Bored API.')\nwith c2:\n  with st.expander('JSON data'):\n    st.write(suggested_activity)\n</code></pre></p> <p>Luego mostraremos una actividad sugerida as\u00ed: <pre><code>st.header('Suggested activity')\nst.info(suggested_activity['activity'])\n</code></pre></p> <p>Finalmente, tambi\u00e9n mostraremos la informaci\u00f3n correspondiente a la actividad sugerida, como el <code>N\u00famero de participantes</code>, <code>Tipo de actividad</code> y <code>Precio</code>. <pre><code>col1, col2, col3 = st.columns(3)\nwith col1:\n  st.metric(label='Number of Participants', value=suggested_activity['participants'], delta='')\nwith col2:\n  st.metric(label='Type of Activity', value=suggested_activity['type'].capitalize(), delta='')\nwith col3:\n  st.metric(label='Price', value=suggested_activity['price'], delta='')\n</code></pre></p>"},{"location":"content/Day26/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li>Bored API</li> </ul>"},{"location":"content/Day27/","title":"Cree un tablero que se pueda arrastrar y cambiar de tama\u00f1o con Streamlit Elements","text":"<p>Streamlit Elements es un componente de terceros creado por okld que le brinda las herramientas para crear hermosas aplicaciones y tableros con componentes de Material UI, Monaco editor (Visual Studio Code), Nivo charts , y m\u00e1s.</p>"},{"location":"content/Day27/#como-usarlo","title":"Como usarlo?","text":""},{"location":"content/Day27/#instalacion","title":"Instalaci\u00f3n","text":"<p>El primer paso es instalar Streamlit Elements en su entorno:</p> <pre><code>pip install streamlit-elements==0.1.*\n</code></pre> <p>Se recomienda fijar la versi\u00f3n a <code>0.1.*</code>, ya que las versiones futuras pueden introducir cambios importantes en la API.</p>"},{"location":"content/Day27/#uso","title":"Uso","text":"<p>Puede consultar Streamlit Elements README para obtener una instrucciones detalladas.</p>"},{"location":"content/Day27/#que-estamos-construyendo","title":"Qu\u00e9 estamos construyendo?","text":"<p>El objetivo del desaf\u00edo de hoy es crear un tablero compuesto por tres tarjetas de IU de material:</p> <ul> <li>Una primera tarjeta con Monaco editor para completar algunos datos;</li> <li>Una segunda tarjeta para mostrar esos datos en un gr\u00e1fico Nivo Bump;</li> <li>Una tercera tarjeta para mostrar una URL de video de YouTube definida con <code>st.text_input</code>.</li> </ul> <p>Puede usar los datos generados a partir de la demostraci\u00f3n de Nivo Bump, en la pesta\u00f1a 'datos': https://nivo.rocks/bump/.</p>"},{"location":"content/Day27/#demo-app","title":"Demo app","text":""},{"location":"content/Day27/#codigo-con-explicacion-linea-por-linea","title":"C\u00f3digo con explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<pre><code># Primero, necesitaremos las siguientes librerias para nuestra aplicaci\u00f3n.\n\nimport json\nimport streamlit as st\nfrom pathlib import Path\n\n# En cuanto a Streamlit Elements, necesitaremos todos estos objetos.\n# Todos los objetos disponibles y su uso se enumeran aqu\u00ed: https://github.com/okld/streamlit-elements#getting-started\n\nfrom streamlit_elements import elements, dashboard, mui, editor, media, lazy, sync, nivo\n\n# Cambie el dise\u00f1o de la p\u00e1gina para que el tablero ocupe toda la p\u00e1gina.\n\nst.set_page_config(layout=\"wide\")\n\nwith st.sidebar:\n    st.title(\"\ud83d\uddd3\ufe0f #30DaysOfStreamlit\")\n    st.header(\"Day 27 - Streamlit Elements\")\n    st.write(\"Build a draggable and resizable dashboard with Streamlit Elements.\")\n    st.write(\"---\")\n\n    # Define URL for media player.\n    media_url = st.text_input(\"Media URL\", value=\"https://www.youtube.com/watch?v=vIQQR_yq-8I\")\n\n# Inicialice los datos predeterminados para el editor de c\u00f3digo y el gr\u00e1fico.\n#\n# Para este tutorial, necesitaremos datos para un gr\u00e1fico Nivo Bump.\n# Puede obtener datos aleatorios aqu\u00ed, en la pesta\u00f1a 'datos': https://nivo.rocks/bump/\n#\n# Como ver\u00e1 a continuaci\u00f3n, este elemento de estado de sesi\u00f3n se actualizar\u00e1 cuando nuestro\n# editor de c\u00f3digo cambie, y el gr\u00e1fico Nivo Bump lo leer\u00e1 para dibujar los datos.\n\nif \"data\" not in st.session_state:\n    st.session_state.data = Path(\"data.json\").read_text()\n\n# Defina un dise\u00f1o de tablero predeterminado.\n# La grilla tiene 12 columnas por defecto.\n#\n# Para obtener m\u00e1s informaci\u00f3n sobre los par\u00e1metros disponibles:\n# https://github.com/react-grid-layout/react-grid-layout#grid-item-props\n\nlayout = [\n    # El elemento del editor se coloca en las coordenadas x=0 e y=0, ocupa 6/12 columnas y tiene una altura de 3.\n    dashboard.Item(\"editor\", 0, 0, 6, 3),\n    # El elemento del gr\u00e1fico se coloca en las coordenadas x=6 e y=0, ocupa 6/12 columnas y tiene una altura de 3.\n    dashboard.Item(\"chart\", 6, 0, 6, 3),\n    # El elemento multimedia se coloca en las coordenadas x=0 e y=3, ocupa 6/12 columnas y tiene una altura de 4.\n    dashboard.Item(\"media\", 0, 2, 12, 4),\n]\n\n# Crea un marco para mostrar elementos.\n\nwith elements(\"demo\"):\n\n    # Cree un nuevo panel con el dise\u00f1o especificado anteriormente.\n    #\n    # draggableHandle es un selector de CSS que define la parte que se puede arrastrar de cada elemento del tablero.\n    # Aqu\u00ed, los elementos con un nombre de clase 'draggable' ser\u00e1n arrastrables.\n    #\n    # Para obtener m\u00e1s informaci\u00f3n sobre los par\u00e1metros disponibles:\n    # https://github.com/react-grid-layout/react-grid-layout#grid-layout-props\n    # https://github.com/react-grid-layout/react-grid-layout#responsive-grid-layout-props\n\n    with dashboard.Grid(layout, draggableHandle=\".draggable\"):\n\n        # Primera tarjeta, el editor de c\u00f3digo.\n        #\n        # Utilizamos el par\u00e1metro `key` para identificar el elemento correcto\n        #\n        # Para hacer que el contenido de la tarjeta llene autom\u00e1ticamente la altura disponible, usaremos CSS flexbox.\n        # sx es un par\u00e1metro disponible con cada componente de Material UI para definir atributos CSS.\n        #\n        # Para m\u00e1s informaci\u00f3n sobre Card, flexbox y sx:\n        # https://mui.com/components/cards/\n        # https://mui.com/system/flexbox/\n        # https://mui.com/system/the-sx-prop/\n\n        with mui.Card(key=\"editor\", sx={\"display\": \"flex\", \"flexDirection\": \"column\"}):\n\n            # Para hacer que este encabezado se pueda arrastrar, solo necesitamos establecer su nombre de clase en 'draggable',\n            # como se defini\u00f3 anteriormente en dashboard.Grid's draggableHandle.\n\n            mui.CardHeader(title=\"Editor\", className=\"draggable\")\n\n            # Queremos hacer que el contenido de la tarjeta tome toda la altura disponible configurando el valor de CSS flex en 1.\n            # Tambi\u00e9n queremos que el contenido de la tarjeta se reduzca cuando la tarjeta se encoja al establecer minHeight en 0.\n\n            with mui.CardContent(sx={\"flex\": 1, \"minHeight\": 0}):\n\n                # Aqu\u00ed est\u00e1 nuestro editor de c\u00f3digo de Monaco.\n                #\n                # Primero, establecemos el valor predeterminado en st.session_state.data que inicializamos anteriormente.\n                # Segundo, definimos el lenguaje a usar, JSON.\n                #\n                # Luego, queremos recuperar los cambios realizados en el contenido del editor.\n                # Al verificar la documentaci\u00f3n de Monaco, hay una propiedad onChange que toma una funci\u00f3n.\n                # Esta funci\u00f3n se llama cada vez que se realiza un cambio, y el valor del contenido actualizado se pasa en\n                # el primer par\u00e1metro (onChange: https://github.com/suren-atoyan/monaco-react#props)\n                #\n                # Streamlit Elements prove\u00e9 una funci\u00f3n especial sync(). Esta funci\u00f3n crea un Callback y\n                # autom\u00e1ticamente redirecciona sus par\u00e1metros al estado de sesi\u00f3n de Streamlit.\n                #\n                # Ejemplos\n                # --------\n                # Cree un Callback que reenv\u00ede su primer par\u00e1metro a un elemento del estado de sesi\u00f3n llamado \"data\":\n                # &gt;&gt;&gt; editor.Monaco(onChange=sync(\"data\"))\n                # &gt;&gt;&gt; print(st.session_state.data)\n                #\n                # Cree un Callback que reenv\u00ede su segundo par\u00e1metro a un elemento del estado de sesi\u00f3n llamado \"ev\":\n                # &gt;&gt;&gt; editor.Monaco(onChange=sync(None, \"ev\"))\n                # &gt;&gt;&gt; print(st.session_state.ev)\n                #\n                # Cree un Callback que reenv\u00ede sus dos par\u00e1metros al estado:\n                # &gt;&gt;&gt; editor.Monaco(onChange=sync(\"data\", \"ev\"))\n                # &gt;&gt;&gt; print(st.session_state.data)\n                # &gt;&gt;&gt; print(st.session_state.ev)\n                #\n                # Ahora, hay un problema: se llama a onChange cada vez que se realiza un cambio, lo que significa que cada vez\n                # que escribe un solo car\u00e1cter, toda su aplicaci\u00f3n Streamlit se volver\u00e1 a ejecutar.\n                #\n                # Para evitar este problema, puede decirle a Streamlit Elements que espere a que ocurra otro evento\n                # (como un clic de bot\u00f3n) para enviar los datos actualizados, envolviendo su devoluci\u00f3n de llamada con lazy().\n                #\n                # Para obtener m\u00e1s informaci\u00f3n sobre Monaco:\n                # https://github.com/suren-atoyan/monaco-react\n                # https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.IStandaloneEditorConstructionOptions.html\n\n                editor.Monaco(\n                    defaultValue=st.session_state.data,\n                    language=\"json\",\n                    onChange=lazy(sync(\"data\"))\n                )\n\n            with mui.CardActions:\n\n                # Monaco editor tiene un Lazy Callback atado al onChange, lo que significa que incluso si cambias\n                # el contenido de Monaco, Streamlit no va a ser notificado directamente, lo que previene que se recargue todo el tiempo.\n                # Entonces necesitamos otro evento para iniciar la actualizaci\u00f3n.\n                #\n                # La soluci\u00f3n es crear un bot\u00f3n que dispare un Callback al hacer click.\n                # \n                # Nuestro callback no necesita hacer nada en particular. Tu puedes incluso crear una\n                # funci\u00f3n vac\u00eda de Python, o utilizar sync() sin ning\u00fan argumento.\n                #\n                # Ahora, cada vez que hagas click en ese bot\u00f3n, el callback de onClick va a ser iniciado, pero\n                # cualquier otro lazy callback que cambi\u00f3 va a ser tambi\u00e9n llamado. \n\n                mui.Button(\"Apply changes\", onClick=sync())\n\n        # Segunda tarjeta, el gr\u00e1fico Nivo Bump.\n        # Usaremos la misma configuraci\u00f3n de flexbox que la primera tarjeta para ajustar autom\u00e1ticamente la altura del contenido.\n\n        with mui.Card(key=\"chart\", sx={\"display\": \"flex\", \"flexDirection\": \"column\"}):\n\n            # Para hacer que este encabezado se pueda arrastrar, solo necesitamos establecer su nombre de clase en 'draggable',\n            # como se defini\u00f3 anteriormente en dashboard.Grid's draggableHandle.\n\n            mui.CardHeader(title=\"Chart\", className=\"draggable\")\n\n            # Como arriba, queremos que nuestro contenido crezca y se reduzca a medida que el usuario cambia el tama\u00f1o de la tarjeta,\n            # configurando flex en 1 y minHeight en 0.\n\n            with mui.CardContent(sx={\"flex\": 1, \"minHeight\": 0}):\n\n                # Aqu\u00ed es donde dibujaremos nuestro gr\u00e1fico Bump.\n                #\n                # Para este ejercicio, podemos simplemente adaptar el ejemplo de Nivo y hacer que funcione con Streamlit Elements.\n                # El ejemplo de Nivo est\u00e1 disponible en la pesta\u00f1a 'code': https://nivo.rocks/bump/\n                #\n                # Los datos toman un diccionario como par\u00e1metro, por lo que necesitamos convertir nuestros datos JSON de una cadena a\n                # un diccionario Python, con `json.loads()`.\n                #\n                # Para obtener m\u00e1s informaci\u00f3n sobre Nivo:\n                # https://nivo.rocks/\n\n                nivo.Bump(\n                    data=json.loads(st.session_state.data),\n                    colors={ \"scheme\": \"spectral\" },\n                    lineWidth=3,\n                    activeLineWidth=6,\n                    inactiveLineWidth=3,\n                    inactiveOpacity=0.15,\n                    pointSize=10,\n                    activePointSize=16,\n                    inactivePointSize=0,\n                    pointColor={ \"theme\": \"background\" },\n                    pointBorderWidth=3,\n                    activePointBorderWidth=3,\n                    pointBorderColor={ \"from\": \"serie.color\" },\n                    axisTop={\n                        \"tickSize\": 5,\n                        \"tickPadding\": 5,\n                        \"tickRotation\": 0,\n                        \"legend\": \"\",\n                        \"legendPosition\": \"middle\",\n                        \"legendOffset\": -36\n                    },\n                    axisBottom={\n                        \"tickSize\": 5,\n                        \"tickPadding\": 5,\n                        \"tickRotation\": 0,\n                        \"legend\": \"\",\n                        \"legendPosition\": \"middle\",\n                        \"legendOffset\": 32\n                    },\n                    axisLeft={\n                        \"tickSize\": 5,\n                        \"tickPadding\": 5,\n                        \"tickRotation\": 0,\n                        \"legend\": \"ranking\",\n                        \"legendPosition\": \"middle\",\n                        \"legendOffset\": -40\n                    },\n                    margin={ \"top\": 40, \"right\": 100, \"bottom\": 40, \"left\": 60 },\n                    axisRight=None,\n                )\n\n        # Tercer elemento del tablero, el reproductor multimedia.\n\n        with mui.Card(key=\"media\", sx={\"display\": \"flex\", \"flexDirection\": \"column\"}):\n            mui.CardHeader(title=\"Media Player\", className=\"draggable\")\n            with mui.CardContent(sx={\"flex\": 1, \"minHeight\": 0}):\n\n                # Este elemento funciona con ReactPlayer, es compatible con muchos otros reproductores\n                # adem\u00e1s de YouTube. Puedes verificarlo aqu\u00ed: https://github.com/cookpete/react-player#props\n\n                media.Player(url=media_url, width=\"100%\", height=\"100%\", controls=True)\n</code></pre>"},{"location":"content/Day27/#alguna-pregunta","title":"Alguna pregunta?","text":"<p>No dude en hacer cualquier pregunta sobre Streamlit Elements o este desaf\u00edo aqu\u00ed: Streamlit Elements Topic</p>"},{"location":"content/Day28/","title":"streamlit-shap","text":"<p><code>streamlit-shap</code> es un componente de Streamlit que proporciona un contenedor para mostrar gr\u00e1ficos SHAP en Streamlit. </p> <p>La librer\u00eda est\u00e1 desarrollada por nuestro personal interno Snehan Kekre que tambi\u00e9n mantiene el sitio web de Streamlit Documentation.</p> <p>En primer lugar, instale Streamlit (\u00a1por supuesto!) y luego instale la librer\u00eda <code>streamlit-shap</code>: <pre><code>pip install streamlit\npip install streamlit-shap\n</code></pre></p> <p>Tambi\u00e9n hay otras dependencias para instalar (por ejemplo, <code>matplotlib</code>, <code>pandas</code>, <code>scikit-learn</code> y <code>xgboost</code>) si a\u00fan no lo ha hecho.</p>"},{"location":"content/Day28/#demo-app","title":"Demo app","text":""},{"location":"content/Day28/#code","title":"Code","text":"<p>Aqu\u00ed se explica c\u00f3mo usar <code>streamlit-shap</code>: <pre><code>import streamlit as st\nfrom streamlit_shap import st_shap\nimport shap\nfrom sklearn.model_selection import train_test_split\nimport xgboost\nimport numpy as np\nimport pandas as pd\n\nst.set_page_config(layout=\"wide\")\n\n@st.experimental_memo\ndef load_data():\n    return shap.datasets.adult()\n\n@st.experimental_memo\ndef load_model(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)\n    d_train = xgboost.DMatrix(X_train, label=y_train)\n    d_test = xgboost.DMatrix(X_test, label=y_test)\n    params = {\n        \"eta\": 0.01,\n        \"objective\": \"binary:logistic\",\n        \"subsample\": 0.5,\n        \"base_score\": np.mean(y_train),\n        \"eval_metric\": \"logloss\",\n        \"n_jobs\": -1,\n    }\n    model = xgboost.train(params, d_train, 10, evals = [(d_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n    return model\n\nst.title(\"`streamlit-shap` for displaying SHAP plots in a Streamlit app\")\n\nwith st.expander('About the app'):\n    st.markdown('''[`streamlit-shap`](https://github.com/snehankekre/streamlit-shap) is a Streamlit component that provides a wrapper to display [SHAP](https://github.com/slundberg/shap) plots in [Streamlit](https://streamlit.io/). \n                    The library is developed by our in-house staff [Snehan Kekre](https://github.com/snehankekre) who also maintains the [Streamlit Documentation](https://docs.streamlit.io/) website.\n                ''')\n\nst.header('Input data')\nX,y = load_data()\nX_display,y_display = shap.datasets.adult(display=True)\n\nwith st.expander('About the data'):\n    st.write('Adult census data is used as the example dataset.')\nwith st.expander('X'):\n    st.dataframe(X)\nwith st.expander('y'):\n    st.dataframe(y)\n\nst.header('SHAP output')\n\n# train XGBoost model\nmodel = load_model(X, y)\n\n# compute SHAP values\nexplainer = shap.Explainer(model, X)\nshap_values = explainer(X)\n\nwith st.expander('Waterfall plot'):\n    st_shap(shap.plots.waterfall(shap_values[0]), height=300)\nwith st.expander('Beeswarm plot'):\n    st_shap(shap.plots.beeswarm(shap_values), height=300)\n\nexplainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(X)\n\nwith st.expander('Force plot'):\n    st.subheader('First data instance')\n    st_shap(shap.force_plot(explainer.expected_value, shap_values[0,:], X_display.iloc[0,:]), height=200, width=1000)\n    st.subheader('First thousand data instance')\n    st_shap(shap.force_plot(explainer.expected_value, shap_values[:1000,:], X_display.iloc[:1000,:]), height=400, width=1000)\n</code></pre></p>"},{"location":"content/Day28/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\nfrom streamlit_shap import st_shap\nimport shap\nfrom sklearn.model_selection import train_test_split\nimport xgboost\nimport numpy as np\nimport pandas as pd\n</code></pre></p> <p>A continuaci\u00f3n, configuraremos el dise\u00f1o de la p\u00e1gina para que sea ancho, de modo que el contenido de la aplicaci\u00f3n Streamlit pueda extenderse por todo el ancho de la p\u00e1gina. <pre><code>st.set_page_config(layout=\"wide\")\n</code></pre></p> <p>Luego, cargaremos un conjunto de datos de <code>shap</code>: <pre><code>@st.experimental_memo\ndef load_data():\n    return shap.datasets.adult()\n</code></pre></p> <p>Posteriormente, definiremos una funci\u00f3n llamada <code>load_model</code> para tomar el par de matrices <code>X, y</code> como entrada, realizar la divisi\u00f3n de datos para entrenar/probar conjuntos, construir una <code>DMatrix</code> y construir un modelo XGBoost. <pre><code>@st.experimental_memo\ndef load_model(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)\n    d_train = xgboost.DMatrix(X_train, label=y_train)\n    d_test = xgboost.DMatrix(X_test, label=y_test)\n    params = {\n        \"eta\": 0.01,\n        \"objective\": \"binary:logistic\",\n        \"subsample\": 0.5,\n        \"base_score\": np.mean(y_train),\n        \"eval_metric\": \"logloss\",\n        \"n_jobs\": -1,\n    }\n    model = xgboost.train(params, d_train, 10, evals = [(d_test, \"test\")], verbose_eval=100, early_stopping_rounds=20)\n    return model\n</code></pre></p> <p>A continuaci\u00f3n, se muestra el t\u00edtulo de la aplicaci\u00f3n Streamlit: <pre><code>st.title(\"`streamlit-shap` for displaying SHAP plots in a Streamlit app\")\n</code></pre></p> <p>Se implementa un cuadro de expansi\u00f3n para proporcionar detalles de la aplicaci\u00f3n: <pre><code>with st.expander('About the app'):\n    st.markdown('''[`streamlit-shap`](https://github.com/snehankekre/streamlit-shap) is a Streamlit component that provides a wrapper to display [SHAP](https://github.com/slundberg/shap) plots in [Streamlit](https://streamlit.io/). \n                    The library is developed by our in-house staff [Snehan Kekre](https://github.com/snehankekre) who also maintains the [Streamlit Documentation](https://docs.streamlit.io/) website.\n                ''')\n</code></pre></p> <p>Aqu\u00ed, mostraremos el encabezado junto con el cuadro de expansi\u00f3n con los datos de las variables <code>X</code> e <code>y</code>: <pre><code>st.header('Input data')\nX,y = load_data()\nX_display,y_display = shap.datasets.adult(display=True)\n\nwith st.expander('About the data'):\n    st.write('Adult census data is used as the example dataset.')\nwith st.expander('X'):\n    st.dataframe(X)\nwith st.expander('y'):\n    st.dataframe(y)\n</code></pre></p> <p>Aqu\u00ed, mostraremos el encabezado para el pr\u00f3ximo resultado SHAP: <pre><code>st.header('SHAP output')\n</code></pre></p> <p>Luego, el modelo XGBoost se crea utilizando la funci\u00f3n <code>load_model</code> que se acaba de implementar anteriormente. Finalmente,  <pre><code># train XGBoost model\nX,y = load_data()\nX_display,y_display = shap.datasets.adult(display=True)\n\nmodel = load_model(X, y)\n</code></pre></p> <p>Aqu\u00ed, calcularemos los valores SHAP, que luego se utilizan para crear los gr\u00e1ficos Waterfall y Beeswarm. <pre><code># compute SHAP values\nexplainer = shap.Explainer(model, X)\nshap_values = explainer(X)\n\nwith st.expander('Waterfall plot'):\n    st_shap(shap.plots.waterfall(shap_values[0]), height=300)\nwith st.expander('Beeswarm plot'):\n    st_shap(shap.plots.beeswarm(shap_values), height=300)\n</code></pre></p> <p>Finalmente, los algoritmos de Tree SHAP se utilizan para explicar los resultados de los modelos mediante el comando <code>shap.TreeExplainer</code> y se visualizan mediante el comando <code>shap.force_plot</code>: <pre><code>explainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(X)\n\nwith st.expander('Force plot'):\n    st.subheader('First data instance')\n    st_shap(shap.force_plot(explainer.expected_value, shap_values[0,:], X_display.iloc[0,:]), height=200, width=1000)\n    st.subheader('First thousand data instance')\n    st_shap(shap.force_plot(explainer.expected_value, shap_values[:1000,:], X_display.iloc[:1000,:]), height=400, width=1000)\n</code></pre></p>"},{"location":"content/Day28/#otras-lecturas","title":"Otras lecturas","text":"<ul> <li><code>streamlit-shap</code></li> <li>SHAP</li> </ul>"},{"location":"content/Day29/","title":"Como hacer un clasificador de texto zero-shot usando Hugging Face y Streamlit","text":"<p>En el desaf\u00edo de hoy, Charly Wargnier nos guiar\u00e1 a trav\u00e9s del proceso de desarrollo de un clasificador de texto zero-shot usando Hugging Face y Streamlit.</p>"},{"location":"content/Day29/#introduction","title":"Introduction","text":"<p>\u00a1Hola, Streamliters!</p> <p>\u00a1Hoy estoy emocionado de tener la oportunidad de contribuir al desaf\u00edo 30DaysofStreamlit a trav\u00e9s de este tutorial! \ud83c\udf88</p>"},{"location":"content/Day29/#que-estamos-construyendo","title":"Que estamos construyendo?","text":"<p>\u00a1Crearemos un clasificador de texto zero-shot utilizando la API de Hugging Face y Distilbart!</p> <p>\u00a1Tendr\u00e1s el gran poder de clasificar frases clave sobre la marcha, r\u00e1pido y sin entrenamiento previo de ML!</p> <p>Cree etiquetas de clasificaci\u00f3n, pegue sus frases clave, \u00a1y listo!</p> <p>Puede establecer estas etiquetas de cualquier manera, por ejemplo:</p> <ul> <li>Positivo, Negativo y Neutral para an\u00e1lisis de sentimiento</li> <li>Enojado, Feliz, Emocional para el an\u00e1lisis de emociones.</li> <li>Navegacional, Transaccional, Informativo para prop\u00f3sitos de clasificaci\u00f3n de intenci\u00f3n</li> <li>Su gama de productos (bolsos, zapatos, botas, etc.)</li> </ul> <p>\u00a1T\u00fa decides! </p> <p>\u00bfEntusiasmado? \u00a1Vamos a sumergirnos! </p>"},{"location":"content/Day29/#lea-el-blog-completo","title":"Lea el blog completo","text":"<p>\ud83d\udc49 Leer el blog completo</p>"},{"location":"content/Day3/","title":"st.button","text":"<p><code>st.button</code> permite mostrar un bot\u00f3n.</p>"},{"location":"content/Day3/#que-estamos-construyendo","title":"Que estamos construyendo?","text":"<p>Una simple aplicaci\u00f3n que imprime condicionalmente diferentes mensajes dependiendo si el bot\u00f3n fue presionado o no.</p> <p>Comportamiento de la aplicaci\u00f3n:</p> <ol> <li>Por defecto, la aplicaci\u00f3n imprime <code>Goodbye</code></li> <li>Una vez que se hace click sobre el bot\u00f3n, la aplicaci\u00f3n imprime <code>Why hello there</code></li> </ol>"},{"location":"content/Day3/#demo-app","title":"Demo app","text":"<p>La aplicaci\u00f3n de Streamlit deber\u00eda verse como la mostrada en el siguiente link:</p> <p></p>"},{"location":"content/Day3/#codigo","title":"C\u00f3digo","text":"<p>Aqu\u00ed tenemos el c\u00f3digo para implementar la aplicaci\u00f3n previamente mencionada:</p> <pre><code>import streamlit as st\n\nst.header('st.button')\n\nif st.button('Say hello'):\n     st.write('Why hello there')\nelse:\n     st.write('Goodbye')\n</code></pre>"},{"location":"content/Day3/#explicacion-linea-por-linea","title":"Explicaci\u00f3n linea por linea","text":"<p>Lo primero que tenemos que hacer cuando creamos una aplicaci\u00f3n de Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> de la siguiente manera:</p> <pre><code>import streamlit as st\n</code></pre> <p>Seguimos por crear un encabezado de texto para la aplicaci\u00f3n:</p> <pre><code>st.header('st.button')\n</code></pre> <p>Siguiente, vamos a usar los condicionales <code>if</code> y <code>else</code> para imprimir los correspondientes mensajes.</p> <pre><code>if st.button('Say hello'):\n     st.write('Why hello there')\nelse:\n     st.write('Goodbye')\n</code></pre> <p>Como podemos ver en el anterior c\u00f3digo, el comando <code>st.button()</code> admite el argumento <code>label</code> con el valor <code>Say hello</code>, el cual es el texto que el bot\u00f3n muestra.</p> <p>El comando <code>st.write</code> es usado para imprimir mensajes tales como <code>Why hello there</code> o <code>Goodbye</code> dependiendo si el bot\u00f3n fue presionado o no, lo cual es implementado de la siguiente manera:</p> <pre><code>st.write('Why hello there')\n</code></pre> <p>y</p> <pre><code>st.write('Goodbye')\n</code></pre> <p>Es importante tener en cuenta que los <code>st.write</code> est\u00e1n colocados debajo de las condiciones <code>if</code> y <code>else</code> para realizar el mencionado proceso de mostrar mensajes alternativos.</p>"},{"location":"content/Day3/#siguientes-pasos","title":"Siguientes pasos","text":"<p>Ahora que has creado la app localmente, es hora de desplegarla en Streamlit Community Cloud como lo vamos a mencionar en un pr\u00f3ximo desaf\u00edo.</p> <p>Como esta es la primer semana de tu desaf\u00edo, nosotros proveemos el c\u00f3digo completo (como es mostrado en el c\u00f3digo anterior) y la soluci\u00f3n (la app de ejemplo) dentro de esta web.</p> <p>Avanzando en el pr\u00f3ximo desaf\u00edo, es recomendable que intentes implementar la Streamlit app por vos mismo.</p> <p>No te preocupes si te trabas, tu siempre puedes tomar un vistazo a la soluci\u00f3n. </p>"},{"location":"content/Day3/#referencias","title":"Referencias","text":"<p>Lee acerca <code>st.button</code> en la documentaci\u00f3n de Streamlit.</p>"},{"location":"content/Day30/","title":"El arte de crear aplicaciones Streamlit","text":"<p>Hoy es el d\u00eda 30 del desaf\u00edo #30DaysOfStreamlit. Felicitaciones por llegar tan lejos en el desaf\u00edo.</p> <p>En este tutorial, vamos a poner nuestro nuevo conocimiento de Streamlit para resolver problemas del mundo real.</p>"},{"location":"content/Day30/#problema-del-mundo-real","title":"Problema del mundo real","text":"<p>Como creador de contenido, tener acceso a las im\u00e1genes en miniatura de los videos de YouTube son recursos \u00fatiles para la promoci\u00f3n social y la creaci\u00f3n de contenido.</p> <p>Averig\u00fcemos c\u00f3mo vamos a abordar este problema y crear una aplicaci\u00f3n Streamlit.</p>"},{"location":"content/Day30/#solucion","title":"Soluci\u00f3n","text":"<p>Hoy, vamos a crear <code>yt-img-app</code>, que es una aplicaci\u00f3n Streamlit que puede extraer im\u00e1genes en miniatura de videos de YouTube.</p> <p>En pocas palabras, estos son los 3 pasos simples que queremos que haga la aplicaci\u00f3n Streamlit:</p> <ol> <li>Aceptar una URL de YouTube como entrada de los usuarios</li> <li>Realice el procesamiento de texto de la URL para extraer la identificaci\u00f3n \u00fanica del video de YouTube</li> <li>Use el ID del video de YouTube como argumento para una funci\u00f3n que recupera y muestra la imagen en miniatura</li> </ol>"},{"location":"content/Day30/#instrucciones","title":"Instrucciones","text":"<p>Para comenzar a usar la aplicaci\u00f3n Streamlit, copie y pegue una URL de YouTube en el campo de texto.</p>"},{"location":"content/Day30/#demo-app","title":"Demo app","text":""},{"location":"content/Day30/#codigo","title":"C\u00f3digo","text":"<p>Aqu\u00ed se explica c\u00f3mo construir la aplicaci\u00f3n Streamlit <code>yt-img-app</code>: <pre><code>import streamlit as st\n\nst.title('\ud83d\uddbc\ufe0f yt-img-app')\nst.header('YouTube Thumbnail Image Extractor App')\n\nwith st.expander('About this app'):\n  st.write('This app retrieves the thumbnail image from a YouTube video.')\n\n# Image settings\nst.sidebar.header('Settings')\nimg_dict = {'Max': 'maxresdefault', 'High': 'hqdefault', 'Medium': 'mqdefault', 'Standard': 'sddefault'}\nselected_img_quality = st.sidebar.selectbox('Select image quality', ['Max', 'High', 'Medium', 'Standard'])\nimg_quality = img_dict[selected_img_quality]\n\nyt_url = st.text_input('Paste YouTube URL', 'https://youtu.be/JwSS70SZdyM')\n\ndef get_ytid(input_url):\n  if 'youtu.be' in input_url:\n    ytid = input_url.split('/')[-1]\n  if 'youtube.com' in input_url:\n    ytid = input_url.split('=')[-1]\n  return ytid\n\n# Display YouTube thumbnail image\nif yt_url != '':\n  ytid = get_ytid(yt_url) # yt or yt_url\n\n  yt_img = f'http://img.youtube.com/vi/{ytid}/{img_quality}.jpg'\n  st.image(yt_img)\n  st.write('YouTube video thumbnail image URL: ', yt_img)\nelse:\n  st.write('\u261d\ufe0f Enter URL to continue ...')\n</code></pre></p>"},{"location":"content/Day30/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la biblioteca <code>streamlit</code> como <code>st</code> de la siguiente manera: <pre><code>import streamlit as st\n</code></pre></p> <p>A continuaci\u00f3n, mostramos el t\u00edtulo de la aplicaci\u00f3n y el encabezado que lo acompa\u00f1a: <pre><code>st.title('\ud83d\uddbc\ufe0f yt-img-app')\nst.header('YouTube Thumbnail Image Extractor App')\n</code></pre> Mientras estamos en eso, tambi\u00e9n podr\u00edamos agregar un cuadro expandible. <pre><code>with st.expander('About this app'):\n  st.write('This app retrieves the thumbnail image from a YouTube video.')\n\nHere, we create selection box for accepting user input on the image quality to use.\n```python\n# Image settings\nst.sidebar.header('Settings')\nimg_dict = {'Max': 'maxresdefault', 'High': 'hqdefault', 'Medium': 'mqdefault', 'Standard': 'sddefault'}\nselected_img_quality = st.sidebar.selectbox('Select image quality', ['Max', 'High', 'Medium', 'Standard'])\nimg_quality = img_dict[selected_img_quality]\n</code></pre></p> <p>Se muestra un campo de texto para aceptar la URL del video de YouTube para luego extraer la imagen. <pre><code>yt_url = st.text_input('Paste YouTube URL', 'https://youtu.be/JwSS70SZdyM')\n</code></pre></p> <p>Una funci\u00f3n para realizar el procesamiento de texto de la URL. <pre><code>def get_ytid(input_url):\n  if 'youtu.be' in input_url:\n    ytid = input_url.split('/')[-1]\n  if 'youtube.com' in input_url:\n    ytid = input_url.split('=')[-1]\n  return ytid\n</code></pre></p> <p>Finalmente, usamos el control de flujo para determinar si mostrar un recordatorio para ingresar la URL (es decir, como en la declaraci\u00f3n <code>else</code>) o mostrar la imagen en miniatura de YouTube (es decir, como en la declaraci\u00f3n <code>if</code>). <pre><code># Display YouTube thumbnail image\nif yt_url != '':\n  ytid = get_ytid(yt_url) # yt or yt_url\n\n  yt_img = f'http://img.youtube.com/vi/{ytid}/{img_quality}.jpg'\n  st.image(yt_img)\n  st.write('YouTube video thumbnail image URL: ', yt_img)\nelse:\n  st.write('\u261d\ufe0f Enter URL to continue ...')\n</code></pre></p>"},{"location":"content/Day30/#resumen","title":"Resumen","text":"<p>En resumen, hemos visto que en la creaci\u00f3n de cualquier aplicaci\u00f3n Streamlit, normalmente comenzamos primero identificando y definiendo el problema. A continuaci\u00f3n, ideamos una soluci\u00f3n para abordar el problema dividi\u00e9ndola en pasos granulares, que implementamos en la aplicaci\u00f3n Streamlit.</p> <p>Aqu\u00ed, tambi\u00e9n tenemos que determinar qu\u00e9 datos o informaci\u00f3n necesitamos, el enfoque y el m\u00e9todo a utilizar en el procesamiento de la informaci\u00f3n del usuario para obtener el resultado final deseado.</p> <p>Espero que hayas disfrutado este tutorial, \u00a1Feliz Streamlit-ing!</p>"},{"location":"content/Day4/","title":"Construyendo Streamlit apps con Ken Jee","text":""},{"location":"content/Day4/#mira-el-video-de-ken","title":"Mira el video de Ken","text":"<p>Veamos como Ken Jee construye una Streamlit app en el siguiente video:</p> <p>]</p>"},{"location":"content/Day5/","title":"st.write","text":"<p><code>st.write</code> permite imprimir texto y datos en la Streamlit app. </p> <p>Adem\u00e1s de poder mostrar texto, tambi\u00e9n se puede mostrar lo siguiente mediante el comando <code>st.write()</code>:</p> <ul> <li>Muestra cadenas; funciona como <code>st.markdown()</code></li> <li>Muestra un <code>dict</code> de Python</li> <li>Muestra <code>pandas</code> DataFrame se puede mostrar como una tabla</li> <li>Gr\u00e1ficos/Esquemas/Representaciones de <code>matplotlib</code>, <code>plotly</code>, <code>altair</code>, <code>graphviz</code>, <code>bokeh</code></li> <li>Y mas (ver st.write en la documentaci\u00f3n de Streamlit)</li> </ul>"},{"location":"content/Day5/#que-estamos-construyendo","title":"Que estamos construyendo?","text":"<p>Una aplicaci\u00f3n sencilla que muestra las diversas formas de utilizar el comando <code>st.write()</code> para mostrar texto, n\u00fameros, marcos de datos y gr\u00e1ficos.</p>"},{"location":"content/Day5/#demo-app","title":"Demo app","text":"<p>La aplicaci\u00f3n de Streamlit deber\u00eda verse como la mostrada en el siguiente link:</p> <p></p>"},{"location":"content/Day5/#codigo","title":"C\u00f3digo","text":"<p>As\u00ed es como se usa st.write:</p> <pre><code>import numpy as np\nimport altair as alt\nimport pandas as pd\nimport streamlit as st\n\nst.header('st.write')\n\n# Ejemplo 1\n\nst.write('Hello, *World!* :sunglasses:')\n\n# Ejemplo 2\n\nst.write(1234)\n\n# Ejemplo 3\n\ndf = pd.DataFrame({\n     'first column': [1, 2, 3, 4],\n     'second column': [10, 20, 30, 40]\n     })\nst.write(df)\n\n# Ejemplo 4\n\nst.write('Below is a DataFrame:', df, 'Above is a dataframe.')\n\n# Ejemplo 5\n\ndf2 = pd.DataFrame(\n     np.random.randn(200, 3),\n     columns=['a', 'b', 'c'])\nc = alt.Chart(df2).mark_circle().encode(\n     x='a', y='b', size='c', color='c', tooltip=['a', 'b', 'c'])\nst.write(c)\n</code></pre>"},{"location":"content/Day5/#explicacion-linea-por-linea","title":"Explicaci\u00f3n linea por linea","text":"<p>Lo primero que tenemos que hacer cuando creamos una aplicaci\u00f3n de Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> de la siguiente manera:</p> <pre><code>import streamlit as st\n</code></pre> <p>Seguimos por crear un encabezado de texto para la aplicaci\u00f3n:</p> <pre><code>st.header('st.write')\n</code></pre> <p>Ejemplo 1 Su caso de uso b\u00e1sico es mostrar texto y texto con formato Markdown:</p> <pre><code>st.write('Hello, *World!* :sunglasses:')\n</code></pre> <p>Ejemplo 2 Como se mencion\u00f3 anteriormente, tambi\u00e9n se puede usar para mostrar otros formatos de datos, como n\u00fameros:</p> <pre><code>st.write(1234)\n</code></pre> <p>Ejemplo 3 Los DataFrames tambi\u00e9n se pueden mostrar de la siguiente manera:</p> <pre><code>df = pd.DataFrame({\n     'first column': [1, 2, 3, 4],\n     'second column': [10, 20, 30, 40]\n     })\nst.write(df)\n</code></pre> <p>Ejemplo 4 Puedes pasar m\u00faltiples argumentos:</p> <pre><code>st.write('Below is a DataFrame:', df, 'Above is a dataframe.')\n</code></pre> <p>Ejemplo 5 Finalmente, tambi\u00e9n puede mostrar gr\u00e1ficos pas\u00e1ndolos a una variable de la siguiente manera:</p> <pre><code>df2 = pd.DataFrame(\n     np.random.randn(200, 3),\n     columns=['a', 'b', 'c'])\nc = alt.Chart(df2).mark_circle().encode(\n     x='a', y='b', size='c', color='c', tooltip=['a', 'b', 'c'])\nst.write(c)\n</code></pre>"},{"location":"content/Day5/#demo-app_1","title":"Demo app","text":"<p>La aplicaci\u00f3n de Streamlit deber\u00eda verse como la mostrada en el siguiente link:</p> <p></p>"},{"location":"content/Day5/#siguientes-pasos","title":"Siguientes pasos","text":"<p>Ahora que has creado la app localmente, es hora de desplegarla en Streamlit Community Cloud como lo vamos a mencionar luego en un pr\u00f3ximo desaf\u00edo.</p> <p>Como esta es la primer semana de tu desaf\u00edo, nosotros proveemos el c\u00f3digo completo (como es mostrado en el c\u00f3digo anterior) y la soluci\u00f3n (la app de ejemplo) dentro de esta web.</p> <p>Avanzando en el pr\u00f3ximo desaf\u00edo, es recomendable que intentes implementar la Streamlit app por vos mismo.</p> <p>No te preocupes si te trabas, tu siempre puedes tomar un vistazo a la solucion.</p>"},{"location":"content/Day5/#otras-lecturas","title":"Otras lecturas","text":"<p>A dem\u00e1s de <code>st.write</code>, puedes explorar otras manera para mostrar texto:</p> <ul> <li><code>st.markdown</code></li> <li><code>st.header</code></li> <li><code>st.subheader</code></li> <li><code>st.caption</code></li> <li><code>st.text</code></li> <li><code>st.latex</code></li> <li><code>st.code</code></li> </ul>"},{"location":"content/Day6/","title":"Subir tu Streamlit app a Github","text":""},{"location":"content/Day6/#github","title":"GitHub","text":"<p>Git es un software para realizar un seguimiento de todos los cambios realizados en el c\u00f3digo (es decir, control de versiones). GitHub es un servicio de alojamiento de repositorios de Git que hace que los datos y el c\u00f3digo est\u00e9n disponibles p\u00fablicamente en la web, lo que permite la colaboraci\u00f3n en equipo y permite que otros contribuyan al repositorio.</p> <p>Alojando su aplicaci\u00f3n Streamlit en un repositorio GitHub permitir\u00e1 que las aplicaciones se implementen en la nube (el pr\u00f3ximo desaf\u00edo).</p>"},{"location":"content/Day6/#registrate-en-github","title":"Reg\u00edstrate en GitHub","text":"<p>En primer lugar, reg\u00edstrate para obtener una cuenta de GitHub.</p>"},{"location":"content/Day6/#crear-un-repositorio-de-github","title":"Crear un repositorio de GitHub","text":"<p>Siga los siguientes pasos para crear un repositorio de GitHub: - En la esquina superior derecha, haga clic en el \u00edcono \"+\" que debe revelar un men\u00fa desplegable, luego haga clic en \"New repository\" (Ilustraci\u00f3n 1).</p> <ul> <li> <p>Esto deber\u00eda llevar a una nueva p\u00e1gina web llamada \"Create a new repository\". En el campo \"Repository name\", ingrese un nombre para su repositorio, por ejemplo, <code>helloworld</code> (Ilustraci\u00f3n 2).</p> </li> <li> <p>En el campo \"Initialize this repository with:\", marque \"Add a README file\".</p> </li> <li> <p>Finalmente, click en \"Create repository\" (Ilustraci\u00f3n 3).</p> </li> </ul> <p>Su repositorio reci\u00e9n creado estar\u00e1 disponible en <code>https://github.com/dataprofessor/helloworld</code> donde <code>dataprofessor</code> es el nombre de usuario y <code>helloworld</code> es el nombre del repositorio.</p> <p>A continuaci\u00f3n se muestra la captura de pantalla del repositorio reci\u00e9n creado (Ilustraci\u00f3n 4):</p>"},{"location":"content/Day6/#subir-archivos-al-repositorio-de-github","title":"Subir archivos al repositorio de GitHub","text":"<p>Ligeramente arriba de la tabla de archivos y junto al bot\u00f3n verde Code, haga clic en Add file &gt; Upload files (Ilustraci\u00f3n 5).</p> <p>Esto lo llevar\u00e1 a una nueva p\u00e1gina web donde el cuadro central dice Drag files here to add them to your repository y choose your files, que puede arrastrar y soltar archivos en este cuadro o haga clic en el enlace choose your files para elegir archivos de su computadora.</p> <p>Click en Commit changes para continuar (Ilustraci\u00f3n 6).</p>"},{"location":"content/Day7/","title":"Deploying your Streamlit app with Streamlit Community Cloud","text":""},{"location":"content/Day7/#streamlit-community-cloud","title":"Streamlit Community Cloud","text":"<p>Streamlit Community Cloud es un servicio de alojamiento para desplegar f\u00e1cilmente aplicaciones Streamlit.</p>"},{"location":"content/Day7/#registrese-en-streamlit-community-cloud","title":"Registrese en Streamlit Community Cloud","text":"<p>Puede registrarse f\u00e1cilmente en [Streamlit Community Cloud] (https://streamlit.io/cloud) simplemente iniciando sesi\u00f3n con una cuenta de Google o GitHub.</p>"},{"location":"content/Day7/#desplegar-una-aplicacion-de-streamlit","title":"Desplegar una aplicacion de Streamlit","text":"<p>Para desplegar una aplicaci\u00f3n Streamlit, haga lo siguiente: 1. Inicie sesi\u00f3n con las credenciales de GitHub o Gmail 2. Elija un repositorio, una sucursal y un archivo 3. Haga clic en Implementar</p> <p>Entonces, cada vez que hagas un git push, tu aplicaci\u00f3n se actualizar\u00e1 inmediatamente.</p>"},{"location":"content/Day8/","title":"st.slider","text":"<p><code>st.slider</code> permite la visualizaci\u00f3n de un control deslizante.</p> <p>Se admiten los siguientes tipos de datos: int, float, date, time y datetime.</p>"},{"location":"content/Day8/#que-estamos-construyendo","title":"Que estamos construyendo?","text":"<p>Una aplicaci\u00f3n simple que muestra diferentes maneras de como aceptar datos del usuario con el control deslizante</p> <p>Comportamiento de la aplicaci\u00f3n: 1. El usuario selecciona el valor ajustando el control deslizante 2. La aplicaci\u00f3n imprime el valor seleccionado</p>"},{"location":"content/Day8/#demo-app","title":"Demo app","text":""},{"location":"content/Day8/#codigo","title":"C\u00f3digo","text":"<p>He aqu\u00ed c\u00f3mo usar st.slider:</p> <pre><code>import streamlit as st\nfrom datetime import time, datetime\n\nst.header('st.slider')\n\n# Ejemplo 1\n\nst.subheader('Slider')\n\nage = st.slider('How old are you?', 0, 130, 25)\nst.write(\"I'm \", age, 'years old')\n\n# Ejemplo 2\n\nst.subheader('Range slider')\n\nvalues = st.slider(\n     'Select a range of values',\n     0.0, 100.0, (25.0, 75.0))\nst.write('Values:', values)\n\n# Ejemplo 3\n\nst.subheader('Range time slider')\n\nappointment = st.slider(\n     \"Schedule your appointment:\",\n     value=(time(11, 30), time(12, 45)))\nst.write(\"You're scheduled for:\", appointment)\n\n# Ejemplo 4\n\nst.subheader('Datetime slider')\n\nstart_time = st.slider(\n     \"When do you start?\",\n     value=datetime(2020, 1, 1, 9, 30),\n     format=\"MM/DD/YY - hh:mm\")\nst.write(\"Start time:\", start_time)\n</code></pre>"},{"location":"content/Day8/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la biblioteca <code>streamlit</code> como <code>st</code> as\u00ed: <pre><code>import streamlit as st\nfrom datetime import time, datetime\n</code></pre></p> <p>A esto le sigue la creaci\u00f3n de un texto de encabezado para la aplicaci\u00f3n:: <pre><code>st.header('st.slider')\n</code></pre></p> <p>Ejemplo 1</p> <p>Deslizador:</p> <pre><code>st.subheader('Slider')\n\nage = st.slider('How old are you?', 0, 130, 25)\nst.write(\"I'm \", age, 'years old')\n</code></pre> <p>Como podemos ver, el comando <code>st.slider()</code> se utiliza para recopilar informaci\u00f3n del usuario sobre la edad de los usuarios.</p> <p>El primer argumento de entrada muestra el texto justo encima del componente slider que pregunta <code>'How old are you?'</code>.</p> <p>Los siguientes tres enteros <code>0, 130, 25</code> representan los valores m\u00ednimo, m\u00e1ximo y predeterminado, respectivamente.</p> <p>Ejemplo 2</p> <p>Slider de rango:</p> <pre><code>st.subheader('Range slider')\n\nvalues = st.slider(\n     'Select a range of values',\n     0.0, 100.0, (25.0, 75.0))\nst.write('Values:', values)\n</code></pre> <p>El control deslizante de rango permite la selecci\u00f3n de un par de valores l\u00edmite inferior y superior.</p> <p>El primer argumento muestra el texto justo encima del control deslizante de rango que pregunta <code>'Select a range of values'</code>.</p> <p>Los siguientes tres argumentos <code>0.0, 100.0, (25.0, 75.0)</code> representan los valores m\u00ednimo y m\u00e1ximo, mientras que la \u00faltima tupla indica los valores predeterminados que se utilizar\u00e1n como valores l\u00edmite inferior (25.0) y superior (75.0) seleccionados.</p> <p>Ejemplo 3</p> <p>Deslizador para rango de tiempo:</p> <pre><code>st.subheader('Range time slider')\n\nappointment = st.slider(\n     \"Schedule your appointment:\",\n     value=(time(11, 30), time(12, 45)))\nst.write(\"You're scheduled for:\", appointment)\n</code></pre> <p>El control deslizante de rango de tiempo permite la selecci\u00f3n de un par de valores l\u00edmite inferior y superior de fecha y hora.</p> <p>El primer argumento muestra el texto justo encima del control deslizante de rango de tiempo que pregunta <code>'Schedule your appointment:</code>.</p> <p>Los valores predeterminados para los pares de valores l\u00edmite inferior y superior de fecha y hora se establecen en 11:30 y 12:45, respectivamente.</p> <p>Ejemplo 4</p> <p>Datetime slider:</p> <pre><code>st.subheader('Datetime slider')\n\nstart_time = st.slider(\n     \"When do you start?\",\n     value=datetime(2020, 1, 1, 9, 30),\n     format=\"MM/DD/YY - hh:mm\")\nst.write(\"Start time:\", start_time)\n</code></pre> <p>El control deslizante de datetime permite la selecci\u00f3n de una fecha y hora.</p> <p>El primer argumento muestra el texto justo encima del control deslizante datetime que pregunta <code>'When do you start?'</code>.</p> <p>El valor predeterminado para la fecha y hora se estableci\u00f3 mediante la opci\u00f3n <code>value</code> para que sea el 1 de enero de 2020 a las 9:30</p>"},{"location":"content/Day8/#otras-lecturas","title":"Otras lecturas","text":"<p>Tambi\u00e9n puede explorar el siguiente componente relacionado: - <code>st.select_slider</code></p>"},{"location":"content/Day9/","title":"st.line_chart","text":"<p><code>st.line_chart</code> muestra un gr\u00e1fico de l\u00edneas.</p> <p>Esto es un syntax-sugar en torno a <code>st.altair_chart</code>. La principal diferencia es que este comando utiliza la columna y los \u00edndices propios de los datos para determinar las especificaciones del gr\u00e1fico. Como resultado, esto es m\u00e1s f\u00e1cil de usar para muchos escenarios, mientras que es menos personalizable.</p> <p>Si <code>st.line_chart</code> no adivina la especificaci\u00f3n de datos correctamente, intente especificar su gr\u00e1fico deseado usando <code>st.altair_chart</code>.</p>"},{"location":"content/Day9/#que-estamos-construyendo","title":"Que estamos construyendo?","text":"<p>Una aplicaci\u00f3n sencilla para mostrar un gr\u00e1fico de l\u00edneas.</p> <p>Comportamiento de la aplicaci\u00f3n: 1. Cree un DataFrame <code>Pandas</code> a partir de n\u00fameros generados aleatoriamente usando <code>NumPy</code>. 2. Cree y muestre el gr\u00e1fico de l\u00edneas mediante el comando <code>st.line_chart()</code>.</p>"},{"location":"content/Day9/#demo-app","title":"Demo app","text":""},{"location":"content/Day9/#codigo","title":"Codigo","text":"<p>Aqu\u00ed se explica c\u00f3mo usar <code>st.line_chart</code>: <pre><code>import streamlit as st\nimport pandas as pd\nimport numpy as np\n\nst.header('Line chart')\n\nchart_data = pd.DataFrame(\n     np.random.randn(20, 3),\n     columns=['a', 'b', 'c'])\n\nst.line_chart(chart_data)\n</code></pre></p>"},{"location":"content/Day9/#explicacion-linea-por-linea","title":"Explicaci\u00f3n l\u00ednea por l\u00ednea","text":"<p>Lo primero que debe hacer al crear una aplicaci\u00f3n Streamlit es comenzar importando la librer\u00eda <code>streamlit</code> como <code>st</code>, as\u00ed como otras de la siguiente manera: <pre><code>import streamlit as st\nimport pandas as pd\nimport numpy as np\n</code></pre></p> <p>A continuaci\u00f3n, creamos un encabezado para la aplicaci\u00f3n: <pre><code>st.header('Line chart')\n</code></pre></p> <p>Luego, creamos un DataFrame de n\u00fameros generados aleatoriamente que contiene 3 columnas. <pre><code>chart_data = pd.DataFrame(\n     np.random.randn(20, 3),\n     columns=['a', 'b', 'c'])\n</code></pre></p> <p>Finalmente, se crea un gr\u00e1fico de l\u00edneas usando <code>st.line_chart()</code> con el DataFrame almacenado en la variable <code>chart_data</code> como datos de entrada: <pre><code>st.line_chart(chart_data)\n</code></pre></p>"},{"location":"content/Day9/#otras-lecturas","title":"Otras lecturas","text":"<p>Obtenga m\u00e1s informaci\u00f3n sobre el siguiente comando Streamlit relacionado en el que se basa <code>st.line_chart</code>: - <code>st.altair_chart</code></p>"},{"location":"content/images/readme/","title":"images","text":""}]}